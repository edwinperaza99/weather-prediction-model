{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "edf1b0feca0b2264",
   "metadata": {},
   "source": [
    "# Weather Prediction Model\n",
    "- Edwin Peraza\n",
    "- Max Lebda\n",
    "- Cade Duncan"
   ]
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## Setup\n",
    "This setup is based on the book"
   ],
   "id": "114922f49ce23d1f"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:06.965666500Z",
     "start_time": "2024-11-22T20:14:06.956177400Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from pathlib import Path\n",
    "\n",
    "plt.rc('font', size=14)\n",
    "plt.rc('axes', labelsize=14, titlesize=14)\n",
    "plt.rc('legend', fontsize=14)\n",
    "plt.rc('xtick', labelsize=10)\n",
    "plt.rc('ytick', labelsize=10)\n",
    "\n",
    "IMAGES_PATH = Path(\"..\") / \"reports\" / \"figures\"\n",
    "IMAGES_PATH.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "# Define the save_fig function\n",
    "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
    "    path = IMAGES_PATH / f\"{fig_id}.{fig_extension}\"\n",
    "    print(f\"Saving figure to {path}\")\n",
    "    if tight_layout:\n",
    "        plt.tight_layout()\n",
    "    plt.savefig(path, format=fig_extension, dpi=resolution)"
   ],
   "id": "29f253490966e7f8",
   "outputs": [],
   "execution_count": 25
  },
  {
   "cell_type": "markdown",
   "id": "376fc88245fa7480",
   "metadata": {},
   "source": [
    "## Importing the Data\n",
    "We are importing a dataset from Redivis. For local use it might request authentication with Redivis."
   ]
  },
  {
   "cell_type": "code",
   "id": "d9f2c171f525b0b3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:10.139438100Z",
     "start_time": "2024-11-22T20:14:07.569814200Z"
    }
   },
   "source": [
    "import redivis\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "user = redivis.user(\"cdpdemo\")\n",
    "dataset = user.dataset(\"climate_change_earth_surface_temperature_data:1e0a:v1_0\")\n",
    "table = dataset.table(\"global_temperatures_by_major_city:7x6x\")\n",
    "\n",
    "# Load table as a dataframe\n",
    "df = table.to_pandas_dataframe()\n",
    "df.head()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "  0%|          | 0/239177 [00:00<?, ?it/s]",
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "27acf636edb8440d8a65d3c32e9a4899"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "           dt  AverageTemperature  AverageTemperatureUncertainty  City  \\\n0  1926-10-01              21.425                          0.437  Cali   \n1  1967-03-01               22.05                          0.343  Cali   \n2  1910-06-01              21.577                          0.461  Cali   \n3  1913-05-01              21.109                          0.502  Cali   \n4  1888-10-01              21.432                          1.062  Cali   \n\n    Country Latitude Longitude  \n0  Colombia    4.02N    76.34W  \n1  Colombia    4.02N    76.34W  \n2  Colombia    4.02N    76.34W  \n3  Colombia    4.02N    76.34W  \n4  Colombia    4.02N    76.34W  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dt</th>\n      <th>AverageTemperature</th>\n      <th>AverageTemperatureUncertainty</th>\n      <th>City</th>\n      <th>Country</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1926-10-01</td>\n      <td>21.425</td>\n      <td>0.437</td>\n      <td>Cali</td>\n      <td>Colombia</td>\n      <td>4.02N</td>\n      <td>76.34W</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1967-03-01</td>\n      <td>22.05</td>\n      <td>0.343</td>\n      <td>Cali</td>\n      <td>Colombia</td>\n      <td>4.02N</td>\n      <td>76.34W</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1910-06-01</td>\n      <td>21.577</td>\n      <td>0.461</td>\n      <td>Cali</td>\n      <td>Colombia</td>\n      <td>4.02N</td>\n      <td>76.34W</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1913-05-01</td>\n      <td>21.109</td>\n      <td>0.502</td>\n      <td>Cali</td>\n      <td>Colombia</td>\n      <td>4.02N</td>\n      <td>76.34W</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1888-10-01</td>\n      <td>21.432</td>\n      <td>1.062</td>\n      <td>Cali</td>\n      <td>Colombia</td>\n      <td>4.02N</td>\n      <td>76.34W</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 26
  },
  {
   "cell_type": "markdown",
   "id": "24f2e40ecab3cb5f",
   "metadata": {},
   "source": [
    "## Visualising the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e668726eeefdd3d9",
   "metadata": {},
   "source": [
    "### Visualizing the Change in Temperature Around the World\n",
    "From the same dataset we import the table with information of temperatures of the world"
   ]
  },
  {
   "cell_type": "code",
   "id": "7d18cfb6f67118b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:12.275476700Z",
     "start_time": "2024-11-22T20:14:10.117785700Z"
    }
   },
   "source": [
    "table_global = dataset.table(\"global_temperatures:5yc3\")\n",
    "\n",
    "global_df = table_global.to_pandas_dataframe()\n",
    "global_df.head()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "  0%|          | 0/3192 [00:00<?, ?it/s]",
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "82dc534025d142a79b835d3cf62dc6d1"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "           dt  LandAverageTemperature  LandAverageTemperatureUncertainty  \\\n0  1802-05-01                  10.457                               1.82   \n1  1785-12-01                   1.873                              1.909   \n2  1840-11-01                   4.101                              0.982   \n3  1825-01-01                   3.213                              1.913   \n4  1816-06-01                   11.79                              1.087   \n\n   LandMaxTemperature  LandMaxTemperatureUncertainty  LandMinTemperature  \\\n0                <NA>                           <NA>                <NA>   \n1                <NA>                           <NA>                <NA>   \n2                <NA>                           <NA>                <NA>   \n3                <NA>                           <NA>                <NA>   \n4                <NA>                           <NA>                <NA>   \n\n   LandMinTemperatureUncertainty  LandAndOceanAverageTemperature  \\\n0                           <NA>                            <NA>   \n1                           <NA>                            <NA>   \n2                           <NA>                            <NA>   \n3                           <NA>                            <NA>   \n4                           <NA>                            <NA>   \n\n   LandAndOceanAverageTemperatureUncertainty  \n0                                       <NA>  \n1                                       <NA>  \n2                                       <NA>  \n3                                       <NA>  \n4                                       <NA>  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dt</th>\n      <th>LandAverageTemperature</th>\n      <th>LandAverageTemperatureUncertainty</th>\n      <th>LandMaxTemperature</th>\n      <th>LandMaxTemperatureUncertainty</th>\n      <th>LandMinTemperature</th>\n      <th>LandMinTemperatureUncertainty</th>\n      <th>LandAndOceanAverageTemperature</th>\n      <th>LandAndOceanAverageTemperatureUncertainty</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1802-05-01</td>\n      <td>10.457</td>\n      <td>1.82</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1785-12-01</td>\n      <td>1.873</td>\n      <td>1.909</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1840-11-01</td>\n      <td>4.101</td>\n      <td>0.982</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1825-01-01</td>\n      <td>3.213</td>\n      <td>1.913</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1816-06-01</td>\n      <td>11.79</td>\n      <td>1.087</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 27
  },
  {
   "cell_type": "code",
   "id": "e8a8635a16c8a1ce",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:12.280404800Z",
     "start_time": "2024-11-22T20:14:12.271875100Z"
    }
   },
   "source": [
    "global_df.info()"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3192 entries, 0 to 3191\n",
      "Data columns (total 9 columns):\n",
      " #   Column                                     Non-Null Count  Dtype               \n",
      "---  ------                                     --------------  -----               \n",
      " 0   dt                                         3192 non-null   date32[day][pyarrow]\n",
      " 1   LandAverageTemperature                     3180 non-null   double[pyarrow]     \n",
      " 2   LandAverageTemperatureUncertainty          3180 non-null   double[pyarrow]     \n",
      " 3   LandMaxTemperature                         1992 non-null   double[pyarrow]     \n",
      " 4   LandMaxTemperatureUncertainty              1992 non-null   double[pyarrow]     \n",
      " 5   LandMinTemperature                         1992 non-null   double[pyarrow]     \n",
      " 6   LandMinTemperatureUncertainty              1992 non-null   double[pyarrow]     \n",
      " 7   LandAndOceanAverageTemperature             1992 non-null   double[pyarrow]     \n",
      " 8   LandAndOceanAverageTemperatureUncertainty  1992 non-null   double[pyarrow]     \n",
      "dtypes: date32[day][pyarrow](1), double[pyarrow](8)\n",
      "memory usage: 215.2 KB\n"
     ]
    }
   ],
   "execution_count": 28
  },
  {
   "cell_type": "code",
   "id": "8bc45f24de14b0eb",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:12.726611900Z",
     "start_time": "2024-11-22T20:14:12.280404800Z"
    }
   },
   "source": [
    "global_df['dt'] = pd.to_datetime(global_df['dt'])\n",
    "# Extract the year from the date and add it as a new column\n",
    "global_df['year'] = global_df['dt'].dt.year\n",
    "\n",
    "# Group by year and calculate the mean temperature for each year\n",
    "yearly_avg_temp = global_df.groupby('year')[['LandAverageTemperature', 'LandAndOceanAverageTemperature']].mean().reset_index()\n",
    "\n",
    "# Plotting the yearly averaged Land and Land & Ocean Temperatures\n",
    "plt.figure(figsize=(12, 6))\n",
    "\n",
    "# Plot Land Average Temperature\n",
    "plt.plot(yearly_avg_temp['year'], yearly_avg_temp['LandAverageTemperature'], label='Yearly Land Average Temperature', alpha=0.8)\n",
    "\n",
    "# Plot Land and Ocean Average Temperature\n",
    "plt.plot(yearly_avg_temp['year'], yearly_avg_temp['LandAndOceanAverageTemperature'], label='Yearly Land and Ocean Average Temperature', alpha=0.8)\n",
    "\n",
    "# Adding titles and labels\n",
    "plt.title('Yearly Average Land and Land & Ocean Temperatures Over Time')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Temperature (°C)')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "\n",
    "# Show the plot\n",
    "save_fig(\"Land_and_Ocean_Average_Temperature_Over_Time\")\n",
    "plt.show()"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure to ..\\reports\\figures\\Land_and_Ocean_Average_Temperature_Over_Time.png\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 1200x600 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 29
  },
  {
   "cell_type": "code",
   "id": "4c5fef086beb7011",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:12.740287100Z",
     "start_time": "2024-11-22T20:14:12.724611400Z"
    }
   },
   "source": [
    "df.info()"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 239177 entries, 0 to 239176\n",
      "Data columns (total 7 columns):\n",
      " #   Column                         Non-Null Count   Dtype               \n",
      "---  ------                         --------------   -----               \n",
      " 0   dt                             239177 non-null  date32[day][pyarrow]\n",
      " 1   AverageTemperature             228175 non-null  double[pyarrow]     \n",
      " 2   AverageTemperatureUncertainty  228175 non-null  double[pyarrow]     \n",
      " 3   City                           239177 non-null  string[pyarrow]     \n",
      " 4   Country                        239177 non-null  string[pyarrow]     \n",
      " 5   Latitude                       239177 non-null  string[pyarrow]     \n",
      " 6   Longitude                      239177 non-null  string[pyarrow]     \n",
      "dtypes: date32[day][pyarrow](1), double[pyarrow](2), string[pyarrow](4)\n",
      "memory usage: 14.2 MB\n"
     ]
    }
   ],
   "execution_count": 30
  },
  {
   "cell_type": "code",
   "id": "9f682de8fc1f3881",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:12.742288500Z",
     "start_time": "2024-11-22T20:14:12.735630100Z"
    }
   },
   "source": [
    "df.shape"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "(239177, 7)"
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 31
  },
  {
   "cell_type": "code",
   "id": "687a2dfeb1dadf75",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:19.139067600Z",
     "start_time": "2024-11-22T20:14:19.097951700Z"
    }
   },
   "source": [
    "df.describe()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "               dt  AverageTemperature  AverageTemperatureUncertainty\ncount      239177            228175.0                       228175.0\nmean   1910-11-09           18.125969                       0.969343\nmin    1743-11-01             -26.772                           0.04\n25%    1864-02-01               12.71                           0.34\n50%    1914-02-01              20.428                          0.592\n75%    1963-12-01              25.918                           1.32\nmax    2013-09-01              38.283                         14.037\nstd           NaN             10.0248                       0.979644",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dt</th>\n      <th>AverageTemperature</th>\n      <th>AverageTemperatureUncertainty</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>239177</td>\n      <td>228175.0</td>\n      <td>228175.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1910-11-09</td>\n      <td>18.125969</td>\n      <td>0.969343</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1743-11-01</td>\n      <td>-26.772</td>\n      <td>0.04</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1864-02-01</td>\n      <td>12.71</td>\n      <td>0.34</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1914-02-01</td>\n      <td>20.428</td>\n      <td>0.592</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1963-12-01</td>\n      <td>25.918</td>\n      <td>1.32</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2013-09-01</td>\n      <td>38.283</td>\n      <td>14.037</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>10.0248</td>\n      <td>0.979644</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 32
  },
  {
   "cell_type": "code",
   "id": "89593c6416e58d72",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:28.022084800Z",
     "start_time": "2024-11-22T20:14:19.318527600Z"
    }
   },
   "source": [
    "df['dt'].hist(bins=50, figsize=(10, 5))\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of Date')\n",
    "plt.show()\n",
    "\n",
    "df['AverageTemperature'].hist(bins=50, figsize=(10, 5))\n",
    "plt.xlabel('Average Temperature')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of Average Temperature')\n",
    "plt.show()\n",
    "\n",
    "# Time series visualization for temperatures over time\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(pd.to_datetime(df['dt']), df['AverageTemperature'])\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Average Temperature')\n",
    "plt.title('Temperature Over Time')\n",
    "plt.show()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 1000x500 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 1000x500 with 1 Axes>",
      "image/png": "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GzZs0CuvvKLExEQlJibafV+sWbNG//nPfxQdHa3+/fvbFMMDBw5UnTp11KpVK1WsWFGHDx/WggUL1KpVK3311Vfq2LGjzbGeeOIJffzxx7r11ls1cOBApaWl6Y033lBSUlKO78XevXvVokULHTp0SK1bt1anTp107Ngxffnll1q6dKkSEhLUuHHjPL2v17Ju3TrFxMTo3Llzuv/++1W1alUlJydrzpw5+v7775WUlKRbb73VZp+///5b99xzj4KCgtSrVy/99ttvWrRokXbt2qVvvvlGTZs2VYMGDfTEE09o48aN+vLLL3Xy5EktX77cbvx9+/bp7rvvVv369TVgwAAdOHBA8+bNU7NmzbR8+XKb8zx58qSaNWum7du36+6779bTTz+t1NRUffPNN4qOjta8efPsLuWUpC5duuiXX35RmzZt5Ofnp4iICEnSV199penTpys6OlotWrRQVlaW1q5dq1dffVUrV660+azn9WdOfqWlpenee+/V2bNn9cADD6hEiRIKDAyUJH377bd6+OGH5ebmpo4dOyo0NFQ7duzQO++8o6VLl2rdunXy9/d3aHwA+WQAwAXs37/fSDIxMTG59ps+fbqRZHr27GltS0xMNJLM2LFjrW1vvfWWkWTefPNNu2OcOHHC5nXz5s3N1X5cZsclyYwZMybHPmFhYSYsLMymbezYsUaS8fT0NL/88ou1PSsry/To0cNIMq+99lqu53BlDL169brmuNfaJzo62kgy77//vk371KlTjSRz77332rRnvzeNGzc2p0+ftrbv2rXLlChRwlSrVi3H8a+0cuVKI8nUqFHDnDp1ytp+8uRJc/vttxtJZtWqVXk+v9x8++23RpJ56qmnrG3NmjUzFovF/P7779a21NRUU7JkSVOzZk27YyxcuNBIMs8//7y1bfv27aZEiRKmTp065vjx4zb94+LirppTSWbGjBk5xrpv3z67tj///NOEhISYqlWr2rQvW7bMSDJ169Y1586ds+kfGBiYY76bNGli3N3dzZIlS2zad+/ebcqUKWMiIyNzjCs32ed1+Vjp6ekmPDzclClTxmzatMmm/+rVq427u7u5//77bdqz35uhQ4fatA8YMMBIMn5+fjaf36ysLNOuXTsjyWzcuNHafvlndMSIETbHWrJkiZFkd57Zn8H//ve/Nu1Hjx41oaGhpmLFiuaff/6xtmd/DurWrWv388MYYw4dOmTS0tLs2seNG2ckmU8++cSmPbefOdf7syD75+f58+dtth0/ftz4+vqaSpUqmeTkZJttn332mZFkBg0alGMsAAoPlzsCuKmEhIRIko4fP56n/jndg1SuXLl8jxsUFKSXXnop3/s9/vjjql27tvW1xWLRf/7zH7m7u9td5lfYDh48qMTERNWsWdNu9uvpp59W9erVtXz5cptLSbPFxcXJ19fX+rpatWq6++67tXv3brtLN3Mye/ZsSZcuZbx8MRN/f3/rbEJBvR/Tp0+XdOm9z/b4449bFxDJVqZMGXXq1Ek7duzQpk2bbI7x8ccfS5J1ERtJev/993Xx4kW9/fbbKl++vE3/F198URUrVtRnn31mF0/9+vXVp0+fHGPNnom5XHBwsLp06aLff//d5jLBTz75RJI0ZswY+fj42PR/5pln7I6zefNmrVmzRr169VJMTIzNtttvv139+vXTr7/+WiCXPS5atEjJycl64YUXVK9ePZtt99xzjzp27KjvvvtOqampNttKly6tf//73zZt3bt3lySVL19eQ4YMsbZbLBZ169ZNkvTLL7/YxeDn52f3GY2JiVHLli3166+/Wi97PH78uD7//HPde++9evLJJ236BwQE6IUXXtBff/2lZcuW2Y0xbty4HH9+ZF86fKVBgwZJUo7HKgwTJ060+5n30UcfKTU1VXFxcQoLC7PZ1q1bN9WvX19z5869IfEB+B8udwRQLHXo0EEjR47UwIEDlZCQoDZt2qh58+Z2l1vlVZ06da5rAYumTZvatYWFhSk0NFTbt29Xenr6dR33emzZskWS1Lx5c7vlv93c3NSsWTPt2rVLW7ZsUWhoqM32Bg0a2B3vlltukSSdOnVKZcqUyXXszZs3S8r5cszo6Gib+ByRkpKixYsX67bbblOTJk2s7V27dtXgwYM1e/ZsjR8/Xu7u7pIuXfL42Wef6eOPP1b9+vUlSampqVq4cKEiIyNVp04d6zHWrl0rSdbLBK/k4eGhXbt22bXntqrkvn37FBcXp+XLl+vw4cNKS0uz2f7nn39a/7DOLkzuueceu+Pcfffddm3Z8R49ejTH+5uyY921a5dq1ap11RjzInus3bt35zhWSkqKsrKy9Ntvv6lhw4bW9qpVq9oUnNKlolOSateubfd9mr3tzz//tBujXr16Kl26tF1706ZNlZCQoM2bN6tBgwb6+eeflZmZqbS0tBxj/f333yVdel/uv/9+m22NGjWy6y9JxhjNnDlTs2bN0rZt23T69GllZWVZt+cUb0Hz9vZWZGSkXXt2btatW5fjY0wuXLig48eP6/jx40W2Qi5QHFGkAbipZP+xU7FixVz7hYeHa+3atYqNjdV3332nL774QpJUvXp1vfzyy+ratWu+xs2+tyO/rrZfYGCgkpOTdebMGbtZmcKSPYtxtZiy/wC+crZDks0sWrYSJS79isnMzMzT2G5ubjnmLTAwUBaLJcdx82v27Nm6ePGizb1n0qX4O3bsqLlz52rJkiVq3769JKl169YKDAzU3Llz9dprr8nd3V3z58/XP//8Y3eMkydPSpJeeeWVfMV0tfd7z549atSokVJTUxUdHa0OHTrI19dXbm5uWrFihVauXGlTtGW/hzn9IZ3TGNnxLl68WIsXL75qfOfOncvX+eQke6w5c+bk2u/KsXL7vsptW0ZGht223D5rknT69GmbWH/66Sf99NNPeY41tzGGDBmid955R6GhoXrggQcUHBwsLy8vSZdm364svgtDQEBAjs9eyz7fqVOn5rr/uXPnKNKAG4giDcBNZcWKFZJyn53IVqtWLc2fP18ZGRnauHGjvv/+e7311lt65JFHFBISkuPsw9Vc74Nnr1yJ7vJ2i8VinYFyc7t0dfrFixft+mb/cemo7D96rxZTSkqKTb+C5Ovrq6ysLP31118KCAiw2Xbs2DEZYwpk3OzLGceOHWv3fK9s06dPtxZp7u7u6t69u958800tW7ZMMTEx+vjjj+Xm5qYePXrYnYN0qVi61szh5a72vfPGG2/o77//1scff2xzWaV06fLT7BUALx8/KytLx48ftyt2c8ppdrxvv/229bK7wpI91sKFC+1mn26U3D5rkqyX2WbH+txzz+m1117L1xg55fLYsWOaOnWqateuraSkJJuZwZSUFI0bNy5fY1zvz4KrfZ9ln++vv/7q8IwpgILDPWkAbhq//fabvvjiC3l5ealz58553s/Dw0N33XWXxo0bp7feekvGGC1atMi6PfvSt7zMCOXX6tWr7doOHDigP/74Q3fccYf1UsfsldUOHz5s1z/7UsErubu75yvm7NXjVq1aZX0EQTZjjFatWmXTryBl36eUXWRfLrvN0XFXr16t3377TVWqVFHfvn1z/KpYsaIWLVqkY8eOWffLnjH75JNP9Mcff2jlypWKjo5WpUqVbI6fvTpg9uVjjsq+9OzKFRyNMTnO8GRfepnTtjVr1ti1Zcd7tZUfC9KNHOtqNm/ebLfcvfS/z2D29+Cdd94pi8VSYLHu27dPxhi1atXK7tLNnD7/Uu4/c67nZ0FunCE3AOxRpAG4Kfz000+KiYlRWlqaRowYYfcH9JU2btyY4+Vz2f+q7u3tbW3LXgggpwUzHPXRRx9p69at1tfGGP3rX/9SZmamzbOOqlWrpjJlyujbb7+1Xp6UHe+VCytcHvfx48d14cKFPMVSuXJlRUdHa/v27TYLaEjSBx98oJ07d+ree++1ux+tIPTq1UvSpUu/Ls/L6dOnrTMN2X2uV/aCIS+99JI+/PDDHL+efPJJZWRk6KOPPrLuV79+fdWsWVNff/213n//fRlj7C51lKT/+7//U4kSJTR48OAcnyl36tSpfP0RnX2v2ZXP5ZowYUKOi3k8+uijkqSXX35Z//zzj7U9JSXF+viCyzVq1EiNGzfWZ599ps8//9xue1ZWlt1s3fXq2LGjKleurMmTJ1uL/ctlZGTk+PyxgnTq1Cm7S1Gz7x+sVauW9b7KoKAgPfzww1qzZo0mTZpk9w8W0qX7t6587t3VZOdxzZo1NvehHTp0SCNHjsxxn9x+5lzPz4Lc9OnTR2XKlNFLL72k7du3220/f/58gf3DA4C843JHAC5lz5491pv509PTdezYMa1fv16//vqr3N3dNWrUqKtexna5jz/+WO+//76aNWumKlWqyNfXVzt27NB3332ncuXK2ay2d++992r+/Pnq0qWL2rZtK29vb9WpU0cdOnRw+HxiYmIUFRWlbt26qWLFikpISNCGDRt011132TznzdPTU4MHD9Z//vMf1a9fXx07dtSZM2e0cOFCNW/ePMcb/u+9915t2LBBbdu2VdOmTeXp6almzZqpWbNmV43nvffe0z333KN+/fpp4cKFqlmzprZv365vv/1WFStW1HvvvefwOeekWbNmGjx4sN5++23VqlVLXbp0kTFGX375pQ4dOqQhQ4bkGve1pKamat68eSpVqlSu9xv27t1bcXFxmj59up5//nlre8+ePTVy5EhNnDhRPj4+6tKli92+tWrV0rvvvqsBAwaoWrVqateunapUqaIzZ85o3759WrlypXr37q1p06blKeann35aM2fOVJcuXfTwww+rfPnyWrt2rTZt2qT27dvb3UfWqlUr9ejRQ59++qkiIyPVqVMnpaWl6YsvvlDjxo21cOFC66Vy2T777DNFR0erW7duevPNN1W/fn2VLFlSBw8eVFJSkv766688F/m58fLy0vz589W2bVs1b95c9957ryIjI60PXV+9erXKly+f48IqBaVp06Z67733tG7dOt11111KTk7WvHnzVLJkSX344Yc2fd99913t3r1bL774oj7++GNFRUXJz89Pf/zxhzZs2KDff/9dR44csZsZy0n2apxffvmlGjZsqJYtW+ro0aNatGiRWrZsedXP7tV+5lzPz4LcZK862rVrV9WpU0dt2rRR9erVlZaWpuTkZK1cuVJNmjTRkiVL8nVcAA4qmpX/ASB/Ln/WUfZXyZIlTXBwsImOjjajR482e/bsyXHfnJ4rtHbtWvPUU0+ZWrVqGT8/P1OyZElTtWpVM2jQIHPgwAGb/TMyMsyLL75oKleubEqUKGHzHKKrPZfocrk9Jy0xMdH897//NXfccYfx8vIywcHB5plnnjGpqal2x8nMzDSxsbEmNDTUeHp6mttvv91MmTLF7Nu3L8cYzpw5Y/r162eCg4ONu7u7zXuQW9zJycmmT58+Jjg42JQoUcIEBwebPn362D1DyZjcn+fUq1cvI8ns37//qu/NlWbMmGHuvPNO4+PjY3x8fMydd9551WeI5ec5ae+///4185Tt7rvvNpLMTz/9ZG07ePCgcXNzM5JM9+7dc91//fr1plu3biYkJMR4eHiYChUqmPr165sRI0aYnTt3Wvvl9ryry/vcfffdpkyZMsbPz8+0a9fObNy40eb753IZGRlm/PjxJiIiwnh6eppbb73V/Oc//zHr1q0zkswzzzxjN8bJkyfNqFGjTK1atUzJkiVN6dKlTdWqVU2PHj3MV199dc33K6eYr/ZeHzp0yDzzzDOmatWqxsvLy/j6+poaNWqYJ5980iQkJNj0lWSaN29ud4zcvndzek8v779t2zbTrl074+vra0qVKmVatWplNmzYkON5nD9/3kycONE0aNDAlCpVypQsWdJERESYTp06mY8++shkZGRY++b2OTDm0mfxueeeM+Hh4cbLy8tUrVrVjB8/3qSnp+d4nrn9zDEm/z8L8vJZ2bVrl+nbt68JCwsznp6e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pKenq2vXrhowYECO2zMzM9W+fXulp6drzZo1mj17tmbNmqUxY8bc4EghSZ9//rmGDRumsWPHatOmTapTp45iYmJ07Nixog6t2Dt37pzq1KmjqVOn5rh94sSJeuuttzRt2jStW7dOpUqVUkxMjC5cuHCDI4UkrVy5UgMHDtTatWsVHx+vjIwMtW7dWufOnbP2GTp0qBYuXKh58+Zp5cqV+vPPP/Xggw8WYdTF2y233KIJEyZo48aN2rBhg+6991517NhR27dvl0S+nNXPP/+s999/X7Vr17Zpv2H5MrghvvnmG2OxWEx6eroxxph3333X+Pv7m7S0NGuf4cOHm2rVqhVViLjCxIkTTUREhPU1OXNOM2fONGXLlrVr/+6774ybm5tJSUmxtr333nvG19fXJoe4MRo1amQGDhxofZ2ZmWlCQkJMXFxcEUaFK0kyX3/9tfV1VlaWCQoKMpMmTbK2nTp1ynh5eZnPPvusCCLElY4dO2YkmZUrVxpjLuXHw8PDzJs3z9pn586dRpJJSkoqqjBxBX9/f/Phhx+SLyd15swZU7VqVRMfH2+aN29unnnmGWPMjf18MZN2A5w8eVJz5sxRkyZN5OHhIUlKSkpSs2bN5Onpae0XExOj3bt36++//y6qUHGZ06dPq1y5ctbX5My1JCUlKTIy0ubB8zExMUpNTbX+6yVujPT0dG3cuFGtWrWytrm5ualVq1ZKSkoqwshwLfv371dKSopN7sqWLavGjRuTOydx+vRpSbL+vtq4caMyMjJscla9enVVrlyZnDmBzMxMzZ07V+fOnVNUVBT5clIDBw5U+/btbfIi3djPF0VaIRo+fLhKlSql8uXL6+DBg/rmm2+s21JSUmz+eJRkfZ2SknJD44S9PXv26O2339ZTTz1lbSNnroV8OY/jx48rMzMzx3yQC+eWnR9y55yysrL07LPP6u6771atWrUkXcqZp6en3b265Kxo/frrrypdurS8vLz09NNP6+uvv1bNmjXJlxOaO3euNm3apLi4OLttNzJfFGn5MGLECFkslly/du3aZe3/wgsvaPPmzfrhhx/k7u6uxx9/XMaYIjyD4ie/OZOkw4cPq02bNuratav69etXRJEXT9eTLwAorgYOHKht27Zp7ty5RR0KrqFatWrasmWL1q1bpwEDBqhXr17asWNHUYeFK/zxxx965plnNGfOHHl7exdpLCWKdHQX89xzz6l379659rn11lut/1+hQgVVqFBBt99+u2rUqKHQ0FCtXbtWUVFRCgoKslsJJvt1UFBQgcdeXOU3Z3/++aeio6PVpEkTuwVByFnhy2++chMUFGS3eiD5KhoVKlSQu7t7jp8fcuHcsvNz9OhRBQcHW9uPHj2qunXrFlFUkKRBgwZp0aJFWrVqlW655RZre1BQkNLT03Xq1Cmbf+3n81a0PD09ddttt0mSGjRooJ9//llTpkzRI488Qr6cyMaNG3Xs2DHVr1/f2paZmalVq1bpnXfe0dKlS29YvijS8qFixYqqWLHide2blZUlSUpLS5MkRUVF6aWXXlJGRob1PrX4+HhVq1ZN/v7+BRMw8pWzw4cPKzo6Wg0aNNDMmTPl5mY70UzOCp8jn7ErRUVF6ZVXXtGxY8cUEBAg6VK+fH19VbNmzQIZA3nj6empBg0aKCEhQZ06dZJ06WdiQkKCBg0aVLTBIVcREREKCgpSQkKCtShLTU21zgbgxjPGaPDgwfr666+1YsUKRURE2Gxv0KCBPDw8lJCQoC5dukiSdu/erYMHDyoqKqooQkYOsrKylJaWRr6cTMuWLfXrr7/atPXp00fVq1fX8OHDFRoaeuPyVaDLkMAYY8zatWvN22+/bTZv3mySk5NNQkKCadKkialSpYq5cOGCMebS6jCBgYGmZ8+eZtu2bWbu3LnGx8fHvP/++0UcffF06NAhc9ttt5mWLVuaQ4cOmSNHjli/spEz53LgwAGzefNmM27cOFO6dGmzefNms3nzZnPmzBljjDEXL140tWrVMq1btzZbtmwxS5YsMRUrVjQjR44s4siLp7lz5xovLy8za9Yss2PHDtO/f3/j5+dns/omisaZM2esnx9JZvLkyWbz5s3mwIEDxhhjJkyYYPz8/Mw333xjtm7dajp27GgiIiLMP//8U8SRF08DBgwwZcuWNStWrLD5XXX+/Hlrn6efftpUrlzZLF++3GzYsMFERUWZqKioIoy6eBsxYoRZuXKl2b9/v9m6dasZMWKEsVgs5ocffjDGkC9nd/nqjsbcuHxRpBWCrVu3mujoaFOuXDnj5eVlwsPDzdNPP20OHTpk0++XX34x99xzj/Hy8jKVKlUyEyZMKKKIMXPmTCMpx6/LkTPn0atXrxzzlZiYaO2TnJxs2rZta0qWLGkqVKhgnnvuOZORkVF0QRdzb7/9tqlcubLx9PQ0jRo1MmvXri3qkGCMSUxMzPGz1KtXL2PMpWX4R48ebQIDA42Xl5dp2bKl2b17d9EGXYxd7XfVzJkzrX3++ecf83//93/G39/f+Pj4mM6dO9v8oyNurCeeeMKEhYUZT09PU7FiRdOyZUtrgWYM+XJ2VxZpNypfFmNYyQIAAAAAnAWrOwIAAACAE6FIAwAAAAAnQpEGAAAAAE6EIg0AAAAAnAhFGgAAAAA4EYo0AAAAAHAiFGkAAAAA4EQo0gAAAADAiVCkAQAAAIAToUgDgJvUE088IYvFovLlyystLa2ow3FJvXv3lsViyfPXrFmzijpkl2CxWNSiRYuiDgMAnFaJog4AAFDwzpw5oy+++EIWi0UnT57UggUL9MgjjxR1WC6nU6dOCg8Pt2lbsWKFVq5cqY4dO6pu3bo22658DQDA9aBIA4Cb0Oeff65z585p2LBhevPNNzV9+nSKtOvQqVMnderUyaYtNjZWK1euVKdOndS7d+8iiQsAcHPjckcAuAlNnz5dJUqU0Isvvqjo6GglJCTowIED1u3nz59XmTJlVKVKlaseo3bt2ipZsqRSU1OtbcYYzZgxQ3fffbd8fX3l4+Ojhg0basaMGXb7x8bGymKxaMWKFZo1a5bq168vHx8f62Vup0+f1quvvqrmzZsrJCREnp6eCgkJ0eOPP669e/fmGNPx48fVv39/BQQEyMfHR3feeae+/vprzZo166qXG27dulXdunVTcHCwPD09FRYWpsGDB+vEiRN5fDfzbtWqVerQoYMqVKggLy8vVa1aVaNGjdL58+dt+q1YsUIWi0WxsbFas2aNoqOjVaZMGVWsWFH/93//p3/++UeStHjxYkVFRalUqVIKDAzUiy++qIsXL9oc6/Jz/+abb9SoUSP5+PioYsWKeuKJJ3T06NEcY92/f7+efPJJVa5cWV5eXgoODlbv3r1tvk+yZV+eePjwYT3++OMKCgqSm5ubVqxYIUlKTEzUE088oWrVqql06dIqXbq0GjZsqA8++CDH85aklStX5nip6OXfN1fKKc/JycmyWCzq3bu3du7cqc6dO6t8+fKyWCxKTk629vvmm2/UsmVL+fv7y9vbW7Vq1dJrr72mzMzMHN8fAChKzKQBwE1mx44dWrt2rdq1a6fAwEA9/vjjSkhI0MyZMxUbGytJ8vHxUZcuXTR79mytWbNGTZo0sTnGL7/8ol9//VWPPPKIfH19JV0q0B599FF99tlnqlq1qnr06CFPT0/Fx8erb9++2rFjh1577TW7eCZNmqTExER17NhRrVu3lru7uyRp586dGjNmjKKjo9W5c2eVKlVKu3bt0qeffqrFixdr06ZNCgsLsx7n7Nmzat68uXbs2KEmTZqoWbNmOnTokLp166aYmJgc34tvv/1WDz/8sNzc3NSxY0eFhoZqx44deuedd7R06VKtW7dO/v7+BfG267333tPAgQPl5+enDh06KCAgQBs2bNArr7yixMREJSYmytPT02afdevW6dVXX1VMTIyeeuopJSYm6r333lNqaqo6dOig3r17q2PHjoqKitLixYs1adIklS5dWmPGjLEb/8svv9TSpUv10EMPqVWrVlq7dq1mzpyp1atXa/369TbnuW7dOsXExOjcuXO6//77VbVqVSUnJ2vOnDn6/vvvlZSUpFtvvdXm+CdOnFBUVJTKlSunbt266cKFC9bvjVdffVV79uzRXXfdpc6dO+vUqVNasmSJnnrqKe3evVuvv/66JCk8PFxjx47VuHHjFBYWZjMT6eilotnjR0ZGqnfv3jpx4oT1/R45cqQmTJigSpUq6cEHH1TZsmW1evVqvfDCC1q3bp3mzZvn0NgAUOAMAOCmMmzYMCPJfPbZZ8YYY86cOWNKlSplKleubDIzM639li1bZiSZAQMG2B3jueeeM5LMokWLrG0ffPCBkWT69Olj0tPTre1paWmmQ4cORpLZsGGDtX3s2LFGkilVqpTZunWr3RinTp0yJ06csGtfvny5cXNzM08++aRN+6hRo4wk079/f5v27POQZGbOnGltP378uPH19TWVKlUyycnJNvt89tlnRpIZNGiQ3fjXkn1el4+1fft2U6JECVOnTh1z/Phxm/5xcXFGknnttdesbYmJidaYFyxYYG1PT083tWvXNhaLxVSoUMGsX7/eui01NdUEBASYcuXK2bz/M2fOtB5ryZIlNmOPGDHC7jzT09NNeHi4KVOmjNm0aZNN/9WrVxt3d3dz//3327RnH79Pnz7m4sWLdu/Jvn377NoyMjLMfffdZ9zd3c2BAwfsjte8eXO7fYz53/ubmJhoty37XC9/7/fv32+Nb8yYMXb7/PDDD0aSiYmJMWfPnrW2Z2VlmaefftpIMvPnz88xFgAoKhRpAHATSU9PNxUrVjS+vr7mn3/+sbY/9thjRpJZunSptS0zM9NUqlTJlC9f3uaP/szMTBMcHGwqVqxoMjIyrO21a9c2pUqVMufPn7cbd+vWrUaSee6556xt2X9sDx06NN/nERkZacLDw23awsPDjaenp0lJSbHr37p1a7s/3idPnmwkmY8++ijHMerXr28qVKiQ79hyKtKGDBliJJlVq1bZ9c/MzDQVK1Y0DRo0sLZlF2nR0dF2/V9++WVrQXSlJ554wkiyKYqyC5dWrVrZ9T9z5ozx8/Mzvr6+1gL9q6++MpLMyy+/nOP5Pfjgg8bNzc2cPn3a2ibJeHp6mr/++ivHfa7myy+/NJLMrFmzbNoLo0gLCgoyaWlpdvs88MADRpJdoWjMpX8osFgspkuXLvk6LwAobFzuCAA3kW+++UZ//fWX+vbtK29vb2v7448/rk8++UTTp09X69atJUlubm569NFHNXHiRH333Xfq2LGjJCkhIUFHjhzR4MGDVaLEpV8T58+f16+//qqQkBC9+uqrduNmZGRIknbt2mW3rVGjRleNd8WKFXrzzTe1bt06HT9+3OZ+q8svDUxNTVVycrJq1qypwMBAu+Pcfffd+uGHH2za1q5dK+nSpX053eN24cIFHT9+XMePH1eFChWuGmNeZI+1dOlSJSQk2G338PDI8b3J6RK/4ODga277888/FRERYbOtadOmdv1Lly6tunXrasWKFdq3b59uu+02a6y7d++2Xv56uZSUFGVlZem3335Tw4YNre0RERFXfZ/OnDmj1157TQsWLNDevXt17tw5m+1//vlnjvsVpDp16thdTipdyk2pUqVyvG9SkkqWLJljbgCgKFGkAcBNZPr06ZIuFWWXa9mypSpVqqRvvvlGJ0+eVLly5SRJPXv21MSJE/XJJ59Yi7SPP/7Yui3b33//LWOMDh8+rHHjxl11/Cv/OJeUY1ElSfPmzdMjjzyi0qVLKyYmRuHh4fLx8bEuDHH5AhbZi5cEBATkeKycxjh58qQkaerUqVeNNztmR4u07LFeeeWVfO2XfU/X5bIL49y2ZRfFl7va+5zdfvr0aZtY58yZk2tsV+byasdPT09XixYttGnTJtWrV089e/ZU+fLlVaJECSUnJ2v27Nk35Dl9V4vv5MmTunjxYr6/bwGgKFGkAcBN4o8//rDOJjVv3vyq/T755BMNGTJEklSrVi3VrVtXixYt0unTp+Xh4aGvv/5a1apV05133mndJ7tgaNCggTZs2JCvuLJX87tSbGysvL29tXHjRlWtWtVm29y5c21eZ49/7NixHI+V0wqG2fv8+uuvqlWrVr5izq/ssVJTU1WmTJlCHetqrraKY3Z72bJlJf0v1oULF+r+++/P8/GvlsdvvvlGmzZtUt++ffXhhx/abJs7d65mz56d5zGkSzO8kuxWsZT+V2jmJz5fX19ZLBYdP348X3EAQFFiCX4AuEnMmjVLWVlZuueee9S3b1+7r169ekn632xbtp49e+rChQuaP3++vv76a509e1aPPfaYTZ8yZcqoRo0a2rlzp06dOlUg8e7du1c1atSwK9COHDmiffv22bT5+voqPDxce/bsybFQW7NmjV1b48aNJUlJSUkFEm9ussfKvpSwKKxevdqu7ezZs9qyZYt8fX2tqzUW9PuSfSlp9kzstWKSLhViV1v6PnsVysOHD9tt27x5c77ja9y4sU6cOKHff/893/sCQFGhSAOAm4AxRjNnzpTFYtHs2bP14Ycf2n3NmjVLUVFR2rp1q81sWI8ePeTu7q6PP/5YH3/8sSwWi12RJklDhgzR+fPn1a9fvxwvD9u/f7/Nc6muJSwsTHv27LGZAbpw4YIGDBiQ4+V8jz76qNLT0zV27Fib9hUrVmjp0qV2/fv06aMyZcropZde0vbt2+22nz9/vsCKqv/7v/9TiRIlNHjwYB08eNBu+6lTp66rwMiPZcuW2b0Pr7zyik6dOqXHH3/cOkPVsWNHVa5cWZMnT9aqVavsjpORkaEff/wxz+NmPybhyn1Wrlyp//73vznuU65cOR06dCjHbdkzuB999JGysrKs7UlJSde8RDMn2bPGTzzxRI7PxktJSdHOnTvzfVwAKExc7ggAN4Hly5dr//79at68ud3zrS7Xp08fJSUlafr06dZFIYKCgtSqVSv98MMPcnNz0z333KPw8HC7fZ966imtXbtWs2fP1k8//aRWrVopJCRER48e1a5du7Ru3Tp9+umnOe6bk8GDB2vw4MGqV6+eHnroIV28eFHx8fEyxqhOnTr65ZdfbPoPHz5cX375paZNm6Zt27apadOmOnTokL744gt16NBBCxcutBYiklSxYkV99tln6tq1q+rUqaM2bdqoevXqSktLU3JyslauXKkmTZpoyZIleYo3N7Vq1dK7776rAQMGqFq1amrXrp2qVKmiM2fOaN++fVq5cqV69+6tadOmOTzW1dx///3q0KGDHnroIYWHh2vt2rVKTExUlSpV9PLLL1v7eXl5af78+Wrbtq2aN2+ue++9V5GRkbJYLDpw4IBWr16t8uXL53kxjQ4dOig8PFwTJ07Utm3bVKtWLe3evVuLFi1S586dNX/+fLt97r33Xn3xxRfq1KmT6tWrJ3d3dz3wwAOqXbu27rrrLt19991avny5oqKi1KxZMx04cEDffPONOnTooK+//jpf70ubNm00evRojR8/XrfddpvatGmjsLAwnThxQnv27NHq1av173//WzVq1MjXcQGgUBXx6pIAgALQvXt3u6XJc3L69GlTsmRJU7ZsWZul9D/55BPrs6bef//9XI/x+eefm1atWhl/f3/j4eFhKlWqZFq0aGFef/11myXac1tK3ZhLz6maNm2aueOOO4y3t7cJCgoyffv2NceOHTPNmzc3Of2KOnbsmOnbt6+pUKGC8fb2Ng0aNDBfffWVee2114wk8/XXX9vts2vXLtO3b18TFhZmPD09jb+/v4mMjDRDhgyxeQ5ZXuW0BH+29evXm27dupmQkBDj4eFhKlSoYOrXr29GjBhhdu7cae2XvQT/2LFj7Y6R0zLzV459+Xt6ef8FCxaYO++805QsWdKUL1/e9O7d2xw5ciTH8zh06JB55plnTNWqVY2Xl5fx9fU1NWrUME8++aRJSEiw6atclsw35tJz0rp06WIqVqxofHx8zJ133mnmzp171fM8cuSIefjhh02FChWMm5tbjs+4e/zxx025cuVMyZIlzV133WWWLl2a6xL8vXr1ump8xhgTHx9vOnToYCpWrGg8PDxMUFCQiYqKMuPHjzcHDx7MdV8AuNEsxhhz40tDAAAKzmOPPaY5c+Zox44dxW5GZNasWerTp49mzpyp3r17F3U4AIACwD1pAACXceTIEbu2lStXau7cuapWrVqxK9AAADcn7kkDALiMdu3aqWTJkqpbt65KlSqlHTt2aMmSJXJ3d9fbb79d1OEBAFAgKNIAAC6jV69emjNnjubOnaszZ87Iz89PHTp00MiRI61LywMA4Oq4Jw0AAAAAnAj3pAEAAACAE6FIAwAAAAAnQpEGAAAAAE6EIg0AAAAAnAhFGgAAAAA4EYo0AAAAAHAiFGkAAAAA4EQo0gAAAADAifw/tkyhIWApcXcAAAAASUVORK5CYII="
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 1000x500 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 33
  },
  {
   "cell_type": "code",
   "id": "4b9772c1335d5b7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:28.419032500Z",
     "start_time": "2024-11-22T20:14:28.021083700Z"
    }
   },
   "source": [
    "# Group data by country and calculate the mean temperature\n",
    "country_temp = df.groupby('Country')['AverageTemperature'].mean().sort_values()\n",
    "\n",
    "# Create a bar plot\n",
    "plt.figure(figsize=(10, 8))\n",
    "country_temp.plot(kind='bar', color='skyblue')\n",
    "plt.ylabel('Average Temperature')\n",
    "plt.title('Average Temperature by Country')\n",
    "plt.xticks(rotation=90)\n",
    "plt.show()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 1000x800 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 34
  },
  {
   "cell_type": "code",
   "id": "6d7d4ea82fc4db89",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:29.522505700Z",
     "start_time": "2024-11-22T20:14:28.418032100Z"
    }
   },
   "source": [
    "# Select a few countries to compare\n",
    "selected_countries = ['Colombia', 'United States', 'India', 'China']  # Adjust with the countries you are interested in\n",
    "df['dt'] = pd.to_datetime(df['dt'])  # Convert dt to datetime format\n",
    "df['Year'] = df['dt'].dt.year  # Extract the year\n",
    "df['Month'] = df['dt'].dt.month # Extract the Month\n",
    "df['Day'] = df['dt'].dt.day  # Extract the day\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "for country in selected_countries:\n",
    "    country_data = df[df['Country'] == country].groupby('Year')['AverageTemperature'].mean()\n",
    "    plt.plot(country_data.index, country_data.values, label=country)\n",
    "\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Average Temperature')\n",
    "plt.title('Average Temperature Over Time for Selected Countries')\n",
    "plt.legend()\n",
    "plt.show()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 1000x600 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 35
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:29.944474100Z",
     "start_time": "2024-11-22T20:14:29.524009100Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Group by year and calculate the mean of AverageTemperatureUncertainty\n",
    "yearly_uncertainty = df.groupby('Year')['AverageTemperatureUncertainty'].mean()\n",
    "\n",
    "# Plotting the data\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(yearly_uncertainty.index, yearly_uncertainty.values, marker='o', linestyle='-', linewidth=2)\n",
    "plt.title(\"Average Temperature Uncertainty Over the Years\", fontsize=14)\n",
    "plt.xlabel(\"Year\", fontsize=12)\n",
    "plt.ylabel(\"Average Temperature Uncertainty (°C)\", fontsize=12)\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "save_fig(\"Average_Temperature_Uncertainty_Over_Years\")\n",
    "plt.show()"
   ],
   "id": "fb580bf64cba80e9",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure to ..\\reports\\figures\\Average_Temperature_Uncertainty_Over_Years.png\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 1200x600 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 36
  },
  {
   "cell_type": "markdown",
   "id": "bf3c429eaa81a30e",
   "metadata": {},
   "source": [
    "## Data Preprocessing\n",
    "Now we are working back with our main dataset that we are going to be using for the prediction model"
   ]
  },
  {
   "cell_type": "code",
   "id": "206736820112a0b2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:29.954299500Z",
     "start_time": "2024-11-22T20:14:29.944474100Z"
    }
   },
   "source": [
    "df.head()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "          dt  AverageTemperature  AverageTemperatureUncertainty  City  \\\n0 1926-10-01              21.425                          0.437  Cali   \n1 1967-03-01               22.05                          0.343  Cali   \n2 1910-06-01              21.577                          0.461  Cali   \n3 1913-05-01              21.109                          0.502  Cali   \n4 1888-10-01              21.432                          1.062  Cali   \n\n    Country Latitude Longitude  Year  Month  Day  \n0  Colombia    4.02N    76.34W  1926     10    1  \n1  Colombia    4.02N    76.34W  1967      3    1  \n2  Colombia    4.02N    76.34W  1910      6    1  \n3  Colombia    4.02N    76.34W  1913      5    1  \n4  Colombia    4.02N    76.34W  1888     10    1  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dt</th>\n      <th>AverageTemperature</th>\n      <th>AverageTemperatureUncertainty</th>\n      <th>City</th>\n      <th>Country</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1926-10-01</td>\n      <td>21.425</td>\n      <td>0.437</td>\n      <td>Cali</td>\n      <td>Colombia</td>\n      <td>4.02N</td>\n      <td>76.34W</td>\n      <td>1926</td>\n      <td>10</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1967-03-01</td>\n      <td>22.05</td>\n      <td>0.343</td>\n      <td>Cali</td>\n      <td>Colombia</td>\n      <td>4.02N</td>\n      <td>76.34W</td>\n      <td>1967</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1910-06-01</td>\n      <td>21.577</td>\n      <td>0.461</td>\n      <td>Cali</td>\n      <td>Colombia</td>\n      <td>4.02N</td>\n      <td>76.34W</td>\n      <td>1910</td>\n      <td>6</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1913-05-01</td>\n      <td>21.109</td>\n      <td>0.502</td>\n      <td>Cali</td>\n      <td>Colombia</td>\n      <td>4.02N</td>\n      <td>76.34W</td>\n      <td>1913</td>\n      <td>5</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1888-10-01</td>\n      <td>21.432</td>\n      <td>1.062</td>\n      <td>Cali</td>\n      <td>Colombia</td>\n      <td>4.02N</td>\n      <td>76.34W</td>\n      <td>1888</td>\n      <td>10</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 37
  },
  {
   "cell_type": "code",
   "id": "a21e268f22f0237d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:29.969878400Z",
     "start_time": "2024-11-22T20:14:29.950779800Z"
    }
   },
   "source": [
    "df.info()"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 239177 entries, 0 to 239176\n",
      "Data columns (total 10 columns):\n",
      " #   Column                         Non-Null Count   Dtype          \n",
      "---  ------                         --------------   -----          \n",
      " 0   dt                             239177 non-null  datetime64[ns] \n",
      " 1   AverageTemperature             228175 non-null  double[pyarrow]\n",
      " 2   AverageTemperatureUncertainty  228175 non-null  double[pyarrow]\n",
      " 3   City                           239177 non-null  string[pyarrow]\n",
      " 4   Country                        239177 non-null  string[pyarrow]\n",
      " 5   Latitude                       239177 non-null  string[pyarrow]\n",
      " 6   Longitude                      239177 non-null  string[pyarrow]\n",
      " 7   Year                           239177 non-null  int32          \n",
      " 8   Month                          239177 non-null  int32          \n",
      " 9   Day                            239177 non-null  int32          \n",
      "dtypes: datetime64[ns](1), double[pyarrow](2), int32(3), string[pyarrow](4)\n",
      "memory usage: 17.9 MB\n"
     ]
    }
   ],
   "execution_count": 38
  },
  {
   "cell_type": "markdown",
   "id": "fab1e1322d9cdc4",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3cab574597227008",
   "metadata": {},
   "source": [
    "## Filtering Data Before 1870\n",
    "We chose to remove rows where the `Year` is earlier than 1870. The reasoning behind this decision is:\n",
    "\n",
    "1. **Data Quality**: Data from earlier years contains many missing or incomplete values, which could reduce the reliability of our model.\n",
    "2. **Sufficient Data**: Even after removing rows before 1870, the dataset retains plenty of observations to train our model effectively.\n",
    "3. **Focus on Modern Trends**: By excluding older data, we align our analysis with more recent climate trends, which are likely more relevant and better recorded.\n",
    "\n",
    "This step ensures that our dataset is both clean and representative of reliable climate records, improving the overall quality of the analysis."
   ]
  },
  {
   "cell_type": "code",
   "id": "f6ccd98b2526ad51",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:30.067058400Z",
     "start_time": "2024-11-22T20:14:29.964873900Z"
    }
   },
   "source": [
    "# Number of rows before filtering\n",
    "initial_rows = len(df)\n",
    "\n",
    "# Remove rows where the year is before 1870\n",
    "df = df[df['Year'] >= 1870]\n",
    "\n",
    "# Count rows removed due to the year filter\n",
    "rows_removed_year = initial_rows - len(df)\n",
    "\n",
    "# Remove rows with missing values\n",
    "df = df.dropna(subset=['AverageTemperature', 'AverageTemperatureUncertainty'])\n",
    "\n",
    "# Count rows removed due to missing values\n",
    "rows_removed_na = initial_rows - rows_removed_year - len(df)\n",
    "\n",
    "# Total rows removed\n",
    "total_removed = rows_removed_year + rows_removed_na\n",
    "\n",
    "# Print information about removed rows\n",
    "print(f\"Number of rows removed (Year < 1870): {rows_removed_year}\")\n",
    "print(f\"Number of rows removed (Missing temperature data): {rows_removed_na}\")\n",
    "print(f\"Total number of rows removed: {total_removed}\")\n",
    "print(f\"Number of rows remaining: {len(df)}\")\n",
    "\n",
    "# Display the first few rows of the cleaned dataframe\n",
    "df.info()"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows removed (Year < 1870): 66811\n",
      "Number of rows removed (Missing temperature data): 1241\n",
      "Total number of rows removed: 68052\n",
      "Number of rows remaining: 171125\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 171125 entries, 0 to 228173\n",
      "Data columns (total 10 columns):\n",
      " #   Column                         Non-Null Count   Dtype          \n",
      "---  ------                         --------------   -----          \n",
      " 0   dt                             171125 non-null  datetime64[ns] \n",
      " 1   AverageTemperature             171125 non-null  double[pyarrow]\n",
      " 2   AverageTemperatureUncertainty  171125 non-null  double[pyarrow]\n",
      " 3   City                           171125 non-null  string[pyarrow]\n",
      " 4   Country                        171125 non-null  string[pyarrow]\n",
      " 5   Latitude                       171125 non-null  string[pyarrow]\n",
      " 6   Longitude                      171125 non-null  string[pyarrow]\n",
      " 7   Year                           171125 non-null  int32          \n",
      " 8   Month                          171125 non-null  int32          \n",
      " 9   Day                            171125 non-null  int32          \n",
      "dtypes: datetime64[ns](1), double[pyarrow](2), int32(3), string[pyarrow](4)\n",
      "memory usage: 14.2 MB\n"
     ]
    }
   ],
   "execution_count": 39
  },
  {
   "cell_type": "code",
   "id": "db5043f7ceb6f4fd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:30.103616500Z",
     "start_time": "2024-11-22T20:14:29.998720100Z"
    }
   },
   "source": [
    "df.describe()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "                                  dt  AverageTemperature  \\\ncount                         171125            171125.0   \nmean   1942-04-14 09:55:31.354273280           18.870181   \nmin              1870-01-01 00:00:00             -26.772   \n25%              1906-09-01 00:00:00              13.958   \n50%              1942-05-01 00:00:00               21.21   \n75%              1978-01-01 00:00:00              26.238   \nmax              2013-09-01 00:00:00              38.283   \nstd                              NaN            9.700779   \n\n       AverageTemperatureUncertainty           Year          Month       Day  \ncount                       171125.0  171125.000000  171125.000000  171125.0  \nmean                        0.574956    1941.827226       6.491226       1.0  \nmin                             0.04    1870.000000       1.000000       1.0  \n25%                            0.297    1906.000000       3.000000       1.0  \n50%                            0.441    1942.000000       6.000000       1.0  \n75%                            0.713    1978.000000       9.000000       1.0  \nmax                            4.998    2013.000000      12.000000       1.0  \nstd                         0.417209      41.237217       3.450092       0.0  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dt</th>\n      <th>AverageTemperature</th>\n      <th>AverageTemperatureUncertainty</th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>171125</td>\n      <td>171125.0</td>\n      <td>171125.0</td>\n      <td>171125.000000</td>\n      <td>171125.000000</td>\n      <td>171125.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1942-04-14 09:55:31.354273280</td>\n      <td>18.870181</td>\n      <td>0.574956</td>\n      <td>1941.827226</td>\n      <td>6.491226</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1870-01-01 00:00:00</td>\n      <td>-26.772</td>\n      <td>0.04</td>\n      <td>1870.000000</td>\n      <td>1.000000</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1906-09-01 00:00:00</td>\n      <td>13.958</td>\n      <td>0.297</td>\n      <td>1906.000000</td>\n      <td>3.000000</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1942-05-01 00:00:00</td>\n      <td>21.21</td>\n      <td>0.441</td>\n      <td>1942.000000</td>\n      <td>6.000000</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1978-01-01 00:00:00</td>\n      <td>26.238</td>\n      <td>0.713</td>\n      <td>1978.000000</td>\n      <td>9.000000</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2013-09-01 00:00:00</td>\n      <td>38.283</td>\n      <td>4.998</td>\n      <td>2013.000000</td>\n      <td>12.000000</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>9.700779</td>\n      <td>0.417209</td>\n      <td>41.237217</td>\n      <td>3.450092</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 40
  },
  {
   "cell_type": "code",
   "id": "80df4755914513ed",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:30.105783600Z",
     "start_time": "2024-11-22T20:14:30.030360200Z"
    }
   },
   "source": [
    "df.shape"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "(171125, 10)"
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 41
  },
  {
   "cell_type": "markdown",
   "id": "6b21ff7f5627d53",
   "metadata": {},
   "source": [
    "### Finding Correlation"
   ]
  },
  {
   "cell_type": "code",
   "id": "d211003403ccfd44",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:30.298574100Z",
     "start_time": "2024-11-22T20:14:30.036510100Z"
    }
   },
   "source": [
    "# Function to convert latitude and longitude into numeric\n",
    "def convert_lat_lon(value):\n",
    "    if value[-1] in ['N', 'E']:\n",
    "        return float(value[:-1])  # North and East are positive\n",
    "    else:\n",
    "        return -float(value[:-1])  # South and West are negative\n",
    "\n",
    "# Apply the function to Latitude and Longitude columns, only if needed\n",
    "if df['Latitude'].dtype != 'float64' and df['Latitude'].dtype != 'int64':\n",
    "    df['Latitude'] = df['Latitude'].apply(convert_lat_lon)\n",
    "if df['Longitude'].dtype != 'float64' and df['Longitude'].dtype != 'int64':\n",
    "    df['Longitude'] = df['Longitude'].apply(convert_lat_lon)\n",
    "    \n",
    "# Count how many are NaN (not a number) after conversion\n",
    "latitude_nan_count = df['Latitude'].isna().sum()\n",
    "longitude_nan_count = df['Longitude'].isna().sum()\n",
    "\n",
    "# Count how many rows are NaN\n",
    "average_nan_count = df['AverageTemperature'].isna().sum()\n",
    "averageUncertainty_nan_count = df['AverageTemperature'].isna().sum()\n",
    "\n",
    "# Print the counts of invalid rows\n",
    "print(f\"Number of invalid (NaN) Latitude values: {latitude_nan_count}\")\n",
    "print(f\"Number of invalid (NaN) Longitude values: {longitude_nan_count}\")\n",
    "print(f\"Number of invalid (NaN) Average Temperature values: {average_nan_count}\")\n",
    "print(f\"Number of invalid (NaN) Average Temperature values: {averageUncertainty_nan_count}\")\n",
    "\n",
    "# Keep only the numeric columns\n",
    "correlation_df = df.select_dtypes(include=['float64', 'int64', 'int32'])\n",
    "\n",
    "correlation_matrix = correlation_df.corr(method=\"pearson\")\n",
    "\n",
    "# Display the correlation matrix\n",
    "print(correlation_matrix)"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of invalid (NaN) Latitude values: 0\n",
      "Number of invalid (NaN) Longitude values: 0\n",
      "Number of invalid (NaN) Average Temperature values: 0\n",
      "Number of invalid (NaN) Average Temperature values: 0\n",
      "                               AverageTemperature  \\\n",
      "AverageTemperature                       1.000000   \n",
      "AverageTemperatureUncertainty           -0.036013   \n",
      "Latitude                                -0.349575   \n",
      "Longitude                                0.036157   \n",
      "Year                                     0.042690   \n",
      "Month                                    0.096640   \n",
      "Day                                           NaN   \n",
      "\n",
      "                               AverageTemperatureUncertainty  Latitude  \\\n",
      "AverageTemperature                                 -0.036013 -0.349575   \n",
      "AverageTemperatureUncertainty                       1.000000 -0.099723   \n",
      "Latitude                                           -0.099723  1.000000   \n",
      "Longitude                                          -0.025464  0.168608   \n",
      "Year                                               -0.558767 -0.011595   \n",
      "Month                                              -0.054069  0.000041   \n",
      "Day                                                      NaN       NaN   \n",
      "\n",
      "                               Longitude      Year     Month  Day  \n",
      "AverageTemperature              0.036157  0.042690  0.096640  NaN  \n",
      "AverageTemperatureUncertainty  -0.025464 -0.558767 -0.054069  NaN  \n",
      "Latitude                        0.168608 -0.011595  0.000041  NaN  \n",
      "Longitude                       1.000000 -0.008340 -0.000038  NaN  \n",
      "Year                           -0.008340  1.000000 -0.004860  NaN  \n",
      "Month                          -0.000038 -0.004860  1.000000  NaN  \n",
      "Day                                  NaN       NaN       NaN  NaN  \n"
     ]
    }
   ],
   "execution_count": 42
  },
  {
   "cell_type": "markdown",
   "id": "b7a9cb702d9f6465",
   "metadata": {},
   "source": [
    "### Encoding Categorical Variables: Country\n",
    "To prepare the dataset for machine learning, we need to encode categorical variables into a numerical format. For this dataset, the `Country` column contains categorical values representing different countries. Since machine learning models typically work with numerical data, we will use **one-hot encoding** to transform this variable."
   ]
  },
  {
   "cell_type": "code",
   "id": "34009094bc97db8b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:30.317612800Z",
     "start_time": "2024-11-22T20:14:30.182691100Z"
    }
   },
   "source": [
    "initial_columns = df.shape[1]\n",
    "\n",
    "# Perform one-hot encoding for the 'Country' column in place\n",
    "df = pd.get_dummies(df, columns=['Country'], drop_first=True)\n",
    "\n",
    "# Calculate the number of new columns added\n",
    "new_columns_added = df.shape[1] - initial_columns\n",
    "\n",
    "# Print the number of new columns added\n",
    "print(f\"Number of new columns created for 'Country': {new_columns_added}\")\n",
    "\n",
    "df.info()"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of new columns created for 'Country': 47\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 171125 entries, 0 to 228173\n",
      "Data columns (total 57 columns):\n",
      " #   Column                                      Non-Null Count   Dtype          \n",
      "---  ------                                      --------------   -----          \n",
      " 0   dt                                          171125 non-null  datetime64[ns] \n",
      " 1   AverageTemperature                          171125 non-null  double[pyarrow]\n",
      " 2   AverageTemperatureUncertainty               171125 non-null  double[pyarrow]\n",
      " 3   City                                        171125 non-null  string[pyarrow]\n",
      " 4   Latitude                                    171125 non-null  float64        \n",
      " 5   Longitude                                   171125 non-null  float64        \n",
      " 6   Year                                        171125 non-null  int32          \n",
      " 7   Month                                       171125 non-null  int32          \n",
      " 8   Day                                         171125 non-null  int32          \n",
      " 9   Country_Angola                              171125 non-null  bool[pyarrow]  \n",
      " 10  Country_Australia                           171125 non-null  bool[pyarrow]  \n",
      " 11  Country_Bangladesh                          171125 non-null  bool[pyarrow]  \n",
      " 12  Country_Brazil                              171125 non-null  bool[pyarrow]  \n",
      " 13  Country_Burma                               171125 non-null  bool[pyarrow]  \n",
      " 14  Country_Canada                              171125 non-null  bool[pyarrow]  \n",
      " 15  Country_Chile                               171125 non-null  bool[pyarrow]  \n",
      " 16  Country_China                               171125 non-null  bool[pyarrow]  \n",
      " 17  Country_Colombia                            171125 non-null  bool[pyarrow]  \n",
      " 18  Country_Congo (Democratic Republic Of The)  171125 non-null  bool[pyarrow]  \n",
      " 19  Country_Côte D'Ivoire                       171125 non-null  bool[pyarrow]  \n",
      " 20  Country_Dominican Republic                  171125 non-null  bool[pyarrow]  \n",
      " 21  Country_Egypt                               171125 non-null  bool[pyarrow]  \n",
      " 22  Country_Ethiopia                            171125 non-null  bool[pyarrow]  \n",
      " 23  Country_France                              171125 non-null  bool[pyarrow]  \n",
      " 24  Country_Germany                             171125 non-null  bool[pyarrow]  \n",
      " 25  Country_India                               171125 non-null  bool[pyarrow]  \n",
      " 26  Country_Indonesia                           171125 non-null  bool[pyarrow]  \n",
      " 27  Country_Iran                                171125 non-null  bool[pyarrow]  \n",
      " 28  Country_Iraq                                171125 non-null  bool[pyarrow]  \n",
      " 29  Country_Italy                               171125 non-null  bool[pyarrow]  \n",
      " 30  Country_Japan                               171125 non-null  bool[pyarrow]  \n",
      " 31  Country_Kenya                               171125 non-null  bool[pyarrow]  \n",
      " 32  Country_Mexico                              171125 non-null  bool[pyarrow]  \n",
      " 33  Country_Morocco                             171125 non-null  bool[pyarrow]  \n",
      " 34  Country_Nigeria                             171125 non-null  bool[pyarrow]  \n",
      " 35  Country_Pakistan                            171125 non-null  bool[pyarrow]  \n",
      " 36  Country_Peru                                171125 non-null  bool[pyarrow]  \n",
      " 37  Country_Philippines                         171125 non-null  bool[pyarrow]  \n",
      " 38  Country_Russia                              171125 non-null  bool[pyarrow]  \n",
      " 39  Country_Saudi Arabia                        171125 non-null  bool[pyarrow]  \n",
      " 40  Country_Senegal                             171125 non-null  bool[pyarrow]  \n",
      " 41  Country_Singapore                           171125 non-null  bool[pyarrow]  \n",
      " 42  Country_Somalia                             171125 non-null  bool[pyarrow]  \n",
      " 43  Country_South Africa                        171125 non-null  bool[pyarrow]  \n",
      " 44  Country_South Korea                         171125 non-null  bool[pyarrow]  \n",
      " 45  Country_Spain                               171125 non-null  bool[pyarrow]  \n",
      " 46  Country_Sudan                               171125 non-null  bool[pyarrow]  \n",
      " 47  Country_Syria                               171125 non-null  bool[pyarrow]  \n",
      " 48  Country_Taiwan                              171125 non-null  bool[pyarrow]  \n",
      " 49  Country_Tanzania                            171125 non-null  bool[pyarrow]  \n",
      " 50  Country_Thailand                            171125 non-null  bool[pyarrow]  \n",
      " 51  Country_Turkey                              171125 non-null  bool[pyarrow]  \n",
      " 52  Country_Ukraine                             171125 non-null  bool[pyarrow]  \n",
      " 53  Country_United Kingdom                      171125 non-null  bool[pyarrow]  \n",
      " 54  Country_United States                       171125 non-null  bool[pyarrow]  \n",
      " 55  Country_Vietnam                             171125 non-null  bool[pyarrow]  \n",
      " 56  Country_Zimbabwe                            171125 non-null  bool[pyarrow]  \n",
      "dtypes: bool[pyarrow](48), datetime64[ns](1), double[pyarrow](2), float64(2), int32(3), string[pyarrow](1)\n",
      "memory usage: 12.7 MB\n"
     ]
    }
   ],
   "execution_count": 43
  },
  {
   "cell_type": "code",
   "id": "8a85b73fc1e21169",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:30.319614400Z",
     "start_time": "2024-11-22T20:14:30.229045400Z"
    }
   },
   "source": [
    "df.head()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "          dt  AverageTemperature  AverageTemperatureUncertainty  City  \\\n0 1926-10-01              21.425                          0.437  Cali   \n1 1967-03-01               22.05                          0.343  Cali   \n2 1910-06-01              21.577                          0.461  Cali   \n3 1913-05-01              21.109                          0.502  Cali   \n4 1888-10-01              21.432                          1.062  Cali   \n\n   Latitude  Longitude  Year  Month  Day Country_Angola  ... Country_Syria  \\\n0      4.02     -76.34  1926     10    1          False  ...         False   \n1      4.02     -76.34  1967      3    1          False  ...         False   \n2      4.02     -76.34  1910      6    1          False  ...         False   \n3      4.02     -76.34  1913      5    1          False  ...         False   \n4      4.02     -76.34  1888     10    1          False  ...         False   \n\n  Country_Taiwan Country_Tanzania Country_Thailand Country_Turkey  \\\n0          False            False            False          False   \n1          False            False            False          False   \n2          False            False            False          False   \n3          False            False            False          False   \n4          False            False            False          False   \n\n  Country_Ukraine Country_United Kingdom Country_United States  \\\n0           False                  False                 False   \n1           False                  False                 False   \n2           False                  False                 False   \n3           False                  False                 False   \n4           False                  False                 False   \n\n  Country_Vietnam Country_Zimbabwe  \n0           False            False  \n1           False            False  \n2           False            False  \n3           False            False  \n4           False            False  \n\n[5 rows x 57 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dt</th>\n      <th>AverageTemperature</th>\n      <th>AverageTemperatureUncertainty</th>\n      <th>City</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Day</th>\n      <th>Country_Angola</th>\n      <th>...</th>\n      <th>Country_Syria</th>\n      <th>Country_Taiwan</th>\n      <th>Country_Tanzania</th>\n      <th>Country_Thailand</th>\n      <th>Country_Turkey</th>\n      <th>Country_Ukraine</th>\n      <th>Country_United Kingdom</th>\n      <th>Country_United States</th>\n      <th>Country_Vietnam</th>\n      <th>Country_Zimbabwe</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1926-10-01</td>\n      <td>21.425</td>\n      <td>0.437</td>\n      <td>Cali</td>\n      <td>4.02</td>\n      <td>-76.34</td>\n      <td>1926</td>\n      <td>10</td>\n      <td>1</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1967-03-01</td>\n      <td>22.05</td>\n      <td>0.343</td>\n      <td>Cali</td>\n      <td>4.02</td>\n      <td>-76.34</td>\n      <td>1967</td>\n      <td>3</td>\n      <td>1</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1910-06-01</td>\n      <td>21.577</td>\n      <td>0.461</td>\n      <td>Cali</td>\n      <td>4.02</td>\n      <td>-76.34</td>\n      <td>1910</td>\n      <td>6</td>\n      <td>1</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1913-05-01</td>\n      <td>21.109</td>\n      <td>0.502</td>\n      <td>Cali</td>\n      <td>4.02</td>\n      <td>-76.34</td>\n      <td>1913</td>\n      <td>5</td>\n      <td>1</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1888-10-01</td>\n      <td>21.432</td>\n      <td>1.062</td>\n      <td>Cali</td>\n      <td>4.02</td>\n      <td>-76.34</td>\n      <td>1888</td>\n      <td>10</td>\n      <td>1</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 57 columns</p>\n</div>"
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 44
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:36.324371200Z",
     "start_time": "2024-11-22T20:14:30.242263900Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Histogram for the distribution of dates\n",
    "df['dt'].hist(bins=50, figsize=(10, 5))\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of Date')\n",
    "plt.show()\n",
    "\n",
    "# Histogram for the distribution of Average Temperature\n",
    "df['AverageTemperature'].hist(bins=50, figsize=(10, 5))\n",
    "plt.xlabel('Average Temperature')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of Average Temperature')\n",
    "plt.show()\n",
    "\n",
    "# Time series visualization for Average Temperature over time\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(df['dt'], df['AverageTemperature'], alpha=0.7, label='Average Temperature')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Average Temperature')\n",
    "plt.title('Temperature Over Time')\n",
    "plt.legend()\n",
    "plt.show()"
   ],
   "id": "e3d050f1d8098592",
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 1000x500 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 1000x500 with 1 Axes>",
      "image/png": "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UqVKsu8fxhhz5swZExcXl6x9zJgxRpL54osv7NpT+57zoN8LrN8/r1+/btd3/vx54+3tbYoUKWJOnjxp1/fll18aSaZv374pxgIg83C5I4BHSkBAgCTp/Pnz9zU+pXuQfH1903xcf39/vf7662nerkuXLqpUqZLttcVi0VtvvSVXV9dkl/llttOnT2vDhg0qV65cstmvV155RWXKlNH69evtLiW1mjBhgry9vW2vS5curXr16unIkSPJLt1Myfz58yXdupTx9sVM8uXLZ5tNyKj3Y/bs2ZJuvfdWXbp0sS0gYpUnTx61bdtWBw8e1K5du+z28fnnn0uSbREbSfrkk0908+ZNTZs2Tfnz57cbP3ToUBUsWFBffvllsniqVaum7t27pxirdSbmdoULF1b79u119OhRu8sEv/jiC0nSyJEjlTNnTrvxAwYMSLaf3bt3a+vWreratatCQkLs+p544gn17NlT+/bty5DLHleuXKmTJ09qyJAhqlq1ql1f/fr11aZNG33//feKjY2168udO7fefPNNu7YXX3xRkpQ/f37179/f1m6xWNShQwdJ0q+//posBh8fn2Sf0ZCQEDVr1kz79u2zXfZ4/vx5ffXVV2ratKleeuklu/GFChXSkCFD9Ndff+nHH39MdowxY8ak+P3Deunwnfr27StJKe4rM0yaNCnZ97zPPvtMsbGxmjBhgooXL27X16FDB1WrVk2LFi16KPEB+H9c7gggW2rdurWGDx+uPn36aN26dWrRooUaNWqU7HKr+1W5cuUHWsCiQYMGydqKFy+uokWL6sCBA4qPj3+g/T6IPXv2SJIaNWqUbPlvFxcXNWzYUIcPH9aePXtUtGhRu/7q1asn299jjz0mSbp06ZLy5MmT6rF3794tKeXLMZs0aWIXX3pERUVp1apVevzxx1W3bl1b+3PPPad+/fpp/vz5GjdunFxdXSXduuTxyy+/1Oeff65q1apJkmJjY7VixQpVrFhRlStXtu1j27ZtkmS7TPBObm5uOnz4cLL21FaVPH78uCZMmKD169fr7NmziouLs+s/d+6c7Qdra2FSv379ZPupV69esjZrvNHR0Sne32SN9fDhw6pQocJdY7wf1mMdOXIkxWNFRUUpKSlJv/32m2rUqGFrL1WqlF3BKd0qOiWpUqVKyf6dWvvOnTuX7BhVq1ZV7ty5k7U3aNBA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efOmLl68aNve399f0dHRdmOsr61j7uTh4SEPD48U+9zc3PgAOhHy5VzIl3MhX86HnGWNuMQHK7TikiwPvC0yzv1+Zvh8OZ8HzVlatklXkTZ37twU211cXJQvXz5Vr17drlDKCNevX5eLi/16J66urkpKujW1HxgYKH9/f61bt85WlMXGxmr79u3q3bu3JCkoKEiXLl1SZGSkqlevLklav369kpKSVLt2bduY119/XQkJCbY3NDw8XKVLl07xUkcAAAAAyAjpKtKy4vLC1q1ba/z48SpWrJjKly+v3bt3a/LkyerRo4ekW7N3AwcO1JtvvqlSpUrZluAPCAhQ27ZtJUlly5ZVixYt1LNnT82YMUMJCQnq27evOnTooICAAElSx44dNWbMGIWFhem1117T/v37NXXqVL3//vsP/ZwBAAAAZB+ZvrpjRps2bZpGjBih//znP4qJiVFAQIBefvlljRw50jZm6NChunbtmnr16qVLly6pfv36Wr16te0ZadKtJfb79u2rZs2aycXFRe3bt9cHH3xg68+bN6/Wrl2rPn36qHr16ipQoIBGjhzJM9IAAAAAZKp0FWmbN29+4G0bNmz4QNvlyZNHU6ZM0ZQpU+46xmKxaOzYsRo7duxdx/j6+toeXH03lSpV0pYtWx4oTgAAAAB4EOkq0ho3bpziwiH3IzExMT2HBgAAAIBHUrqKtJEjR2r79u1as2aNSpUqpXr16snPz0/R0dHaunWrfvvtN4WEhKhOnToZFS8AAAAAPNLSVaQ1a9ZMEydO1MyZMxUWFmY3q2aM0aeffqoBAwbo9ddfV/369dMdLAAAAAA86lzuPeTuRowYodDQUL300kvJLnu0WCzq1auXWrZsqREjRqQrSAAAAADILtI1kxYZGakBAwakOqZs2bJ2qyYCAABkJyWGrcrqEAA4mXTNpLm7u2v37t2pjtm9e7fc3d3TcxgAAAAAyDbSNZPWvHlzLV68WBMnTtSgQYPsirH4+Hi99957WrNmjV544YV0BwoAAJCVmBED8LCkq0h75513tGXLFr3++uuaOnWqatSooUKFCikmJkY7d+60PWx60qRJGRUvAAAAADzS0lWkPfbYY9q5c6eGDRumxYsXa9Wq//8Nk6enpzp37qyJEyfK398/3YECAAAAQHaQriJNkvz9/TVv3jx9+umnOnLkiC5fvqy8efPq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"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 1000x500 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 45
  },
  {
   "cell_type": "code",
   "id": "311d50027616bc85",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:36.399804900Z",
     "start_time": "2024-11-22T20:14:36.324371200Z"
    }
   },
   "source": [
    "# Drop the 'City' and 'dt' columns only if they exist\n",
    "columns_to_drop = ['City', 'dt']\n",
    "df = df.drop(columns=[col for col in columns_to_drop if col in df.columns])\n",
    "\n",
    "df.info()"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 171125 entries, 0 to 228173\n",
      "Data columns (total 55 columns):\n",
      " #   Column                                      Non-Null Count   Dtype          \n",
      "---  ------                                      --------------   -----          \n",
      " 0   AverageTemperature                          171125 non-null  double[pyarrow]\n",
      " 1   AverageTemperatureUncertainty               171125 non-null  double[pyarrow]\n",
      " 2   Latitude                                    171125 non-null  float64        \n",
      " 3   Longitude                                   171125 non-null  float64        \n",
      " 4   Year                                        171125 non-null  int32          \n",
      " 5   Month                                       171125 non-null  int32          \n",
      " 6   Day                                         171125 non-null  int32          \n",
      " 7   Country_Angola                              171125 non-null  bool[pyarrow]  \n",
      " 8   Country_Australia                           171125 non-null  bool[pyarrow]  \n",
      " 9   Country_Bangladesh                          171125 non-null  bool[pyarrow]  \n",
      " 10  Country_Brazil                              171125 non-null  bool[pyarrow]  \n",
      " 11  Country_Burma                               171125 non-null  bool[pyarrow]  \n",
      " 12  Country_Canada                              171125 non-null  bool[pyarrow]  \n",
      " 13  Country_Chile                               171125 non-null  bool[pyarrow]  \n",
      " 14  Country_China                               171125 non-null  bool[pyarrow]  \n",
      " 15  Country_Colombia                            171125 non-null  bool[pyarrow]  \n",
      " 16  Country_Congo (Democratic Republic Of The)  171125 non-null  bool[pyarrow]  \n",
      " 17  Country_Côte D'Ivoire                       171125 non-null  bool[pyarrow]  \n",
      " 18  Country_Dominican Republic                  171125 non-null  bool[pyarrow]  \n",
      " 19  Country_Egypt                               171125 non-null  bool[pyarrow]  \n",
      " 20  Country_Ethiopia                            171125 non-null  bool[pyarrow]  \n",
      " 21  Country_France                              171125 non-null  bool[pyarrow]  \n",
      " 22  Country_Germany                             171125 non-null  bool[pyarrow]  \n",
      " 23  Country_India                               171125 non-null  bool[pyarrow]  \n",
      " 24  Country_Indonesia                           171125 non-null  bool[pyarrow]  \n",
      " 25  Country_Iran                                171125 non-null  bool[pyarrow]  \n",
      " 26  Country_Iraq                                171125 non-null  bool[pyarrow]  \n",
      " 27  Country_Italy                               171125 non-null  bool[pyarrow]  \n",
      " 28  Country_Japan                               171125 non-null  bool[pyarrow]  \n",
      " 29  Country_Kenya                               171125 non-null  bool[pyarrow]  \n",
      " 30  Country_Mexico                              171125 non-null  bool[pyarrow]  \n",
      " 31  Country_Morocco                             171125 non-null  bool[pyarrow]  \n",
      " 32  Country_Nigeria                             171125 non-null  bool[pyarrow]  \n",
      " 33  Country_Pakistan                            171125 non-null  bool[pyarrow]  \n",
      " 34  Country_Peru                                171125 non-null  bool[pyarrow]  \n",
      " 35  Country_Philippines                         171125 non-null  bool[pyarrow]  \n",
      " 36  Country_Russia                              171125 non-null  bool[pyarrow]  \n",
      " 37  Country_Saudi Arabia                        171125 non-null  bool[pyarrow]  \n",
      " 38  Country_Senegal                             171125 non-null  bool[pyarrow]  \n",
      " 39  Country_Singapore                           171125 non-null  bool[pyarrow]  \n",
      " 40  Country_Somalia                             171125 non-null  bool[pyarrow]  \n",
      " 41  Country_South Africa                        171125 non-null  bool[pyarrow]  \n",
      " 42  Country_South Korea                         171125 non-null  bool[pyarrow]  \n",
      " 43  Country_Spain                               171125 non-null  bool[pyarrow]  \n",
      " 44  Country_Sudan                               171125 non-null  bool[pyarrow]  \n",
      " 45  Country_Syria                               171125 non-null  bool[pyarrow]  \n",
      " 46  Country_Taiwan                              171125 non-null  bool[pyarrow]  \n",
      " 47  Country_Tanzania                            171125 non-null  bool[pyarrow]  \n",
      " 48  Country_Thailand                            171125 non-null  bool[pyarrow]  \n",
      " 49  Country_Turkey                              171125 non-null  bool[pyarrow]  \n",
      " 50  Country_Ukraine                             171125 non-null  bool[pyarrow]  \n",
      " 51  Country_United Kingdom                      171125 non-null  bool[pyarrow]  \n",
      " 52  Country_United States                       171125 non-null  bool[pyarrow]  \n",
      " 53  Country_Vietnam                             171125 non-null  bool[pyarrow]  \n",
      " 54  Country_Zimbabwe                            171125 non-null  bool[pyarrow]  \n",
      "dtypes: bool[pyarrow](48), double[pyarrow](2), float64(2), int32(3)\n",
      "memory usage: 9.5 MB\n"
     ]
    }
   ],
   "execution_count": 46
  },
  {
   "cell_type": "code",
   "id": "f40c04907c34fda4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:36.401806400Z",
     "start_time": "2024-11-22T20:14:36.356898800Z"
    }
   },
   "source": [
    "df.head()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "   AverageTemperature  AverageTemperatureUncertainty  Latitude  Longitude  \\\n0              21.425                          0.437      4.02     -76.34   \n1               22.05                          0.343      4.02     -76.34   \n2              21.577                          0.461      4.02     -76.34   \n3              21.109                          0.502      4.02     -76.34   \n4              21.432                          1.062      4.02     -76.34   \n\n   Year  Month  Day Country_Angola Country_Australia Country_Bangladesh  ...  \\\n0  1926     10    1          False             False              False  ...   \n1  1967      3    1          False             False              False  ...   \n2  1910      6    1          False             False              False  ...   \n3  1913      5    1          False             False              False  ...   \n4  1888     10    1          False             False              False  ...   \n\n  Country_Syria Country_Taiwan Country_Tanzania Country_Thailand  \\\n0         False          False            False            False   \n1         False          False            False            False   \n2         False          False            False            False   \n3         False          False            False            False   \n4         False          False            False            False   \n\n  Country_Turkey Country_Ukraine Country_United Kingdom Country_United States  \\\n0          False           False                  False                 False   \n1          False           False                  False                 False   \n2          False           False                  False                 False   \n3          False           False                  False                 False   \n4          False           False                  False                 False   \n\n  Country_Vietnam Country_Zimbabwe  \n0           False            False  \n1           False            False  \n2           False            False  \n3           False            False  \n4           False            False  \n\n[5 rows x 55 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AverageTemperature</th>\n      <th>AverageTemperatureUncertainty</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Day</th>\n      <th>Country_Angola</th>\n      <th>Country_Australia</th>\n      <th>Country_Bangladesh</th>\n      <th>...</th>\n      <th>Country_Syria</th>\n      <th>Country_Taiwan</th>\n      <th>Country_Tanzania</th>\n      <th>Country_Thailand</th>\n      <th>Country_Turkey</th>\n      <th>Country_Ukraine</th>\n      <th>Country_United Kingdom</th>\n      <th>Country_United States</th>\n      <th>Country_Vietnam</th>\n      <th>Country_Zimbabwe</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>21.425</td>\n      <td>0.437</td>\n      <td>4.02</td>\n      <td>-76.34</td>\n      <td>1926</td>\n      <td>10</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>22.05</td>\n      <td>0.343</td>\n      <td>4.02</td>\n      <td>-76.34</td>\n      <td>1967</td>\n      <td>3</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.577</td>\n      <td>0.461</td>\n      <td>4.02</td>\n      <td>-76.34</td>\n      <td>1910</td>\n      <td>6</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21.109</td>\n      <td>0.502</td>\n      <td>4.02</td>\n      <td>-76.34</td>\n      <td>1913</td>\n      <td>5</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>21.432</td>\n      <td>1.062</td>\n      <td>4.02</td>\n      <td>-76.34</td>\n      <td>1888</td>\n      <td>10</td>\n      <td>1</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 55 columns</p>\n</div>"
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 47
  },
  {
   "cell_type": "markdown",
   "id": "76618f66e9fb3c96",
   "metadata": {},
   "source": [
    "## Building and Training a Linear Regression Model\n",
    "\n",
    "Now that we have prepared our dataset, the next step is to build and train a machine learning model. For this section, we will use **Linear Regression**, a simple yet powerful algorithm for predicting continuous values. The target variable is `AverageTemperature`.\n",
    "\n",
    "### Why Linear Regression?\n",
    "- **Interpretable**: Linear regression provides coefficients that help explain the relationship between input features and the target variable.\n",
    "- **Efficient**: It is computationally inexpensive, making it a great starting point for modeling.\n",
    "- **Baseline Model**: It serves as a strong baseline to compare the performance of more complex models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "851e178c2396a0e6",
   "metadata": {},
   "source": [
    "#### Selecting Multiple Features\n",
    "We will start by training a model with multiple features"
   ]
  },
  {
   "cell_type": "code",
   "id": "ed92b10d0e1f1a04",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:44.939596500Z",
     "start_time": "2024-11-22T20:14:44.906563700Z"
    }
   },
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pickle\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year','Month', 'Latitude', 'Longitude']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the data: 80% training, 20% testing, use random splitting\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Fit the model on the training set\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Save the model to disk\n",
    "filename = '../models/regression_model_M1.sav'\n",
    "pickle.dump(model, open(filename, 'wb'))\n",
    "\n",
    "# Load the model from disk\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Evaluate the loaded model on the test set\n",
    "result = loaded_model.score(X_test, y_test)\n",
    "print(f\"R² Score of the Linear Regression model: {result:.4f}\")"
   ],
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/regression_model_M1.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[48], line 18\u001B[0m\n\u001B[0;32m     16\u001B[0m \u001B[38;5;66;03m# Save the model to disk\u001B[39;00m\n\u001B[0;32m     17\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/regression_model_M1.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 18\u001B[0m pickle\u001B[38;5;241m.\u001B[39mdump(model, \u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mwb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     20\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     21\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28mopen\u001B[39m(filename, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mrb\u001B[39m\u001B[38;5;124m'\u001B[39m))\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/regression_model_M1.sav'"
     ]
    }
   ],
   "execution_count": 48
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Visualizing the Results"
   ],
   "id": "a9addb48b06da31c"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:14:46.772000100Z",
     "start_time": "2024-11-22T20:14:46.523478300Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year','Month', 'Latitude', 'Longitude']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the data: 80% training, 20% testing, use random splitting\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/regression_model_M1.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "\n",
    "# Plot Actual vs. Predicted\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6)\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)  # Reference line\n",
    "plt.title(\"Actual vs Predicted Temperatures (Linear Regression Model)\")\n",
    "plt.xlabel(\"Actual Temperatures\")\n",
    "plt.ylabel(\"Predicted Temperatures\")\n",
    "plt.grid(True)\n",
    "save_fig(\"Actual_vs_Predicted_Linear_Regression_M1\")\n",
    "plt.show()"
   ],
   "id": "2055a7ae0406c82e",
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/regression_model_M1.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[49], line 13\u001B[0m\n\u001B[0;32m     11\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     12\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/regression_model_M1.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 13\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mrb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     15\u001B[0m \u001B[38;5;66;03m# Predict using the test set\u001B[39;00m\n\u001B[0;32m     16\u001B[0m y_pred \u001B[38;5;241m=\u001B[39m loaded_model\u001B[38;5;241m.\u001B[39mpredict(X_test)\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/regression_model_M1.sav'"
     ]
    }
   ],
   "execution_count": 49
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:15:01.725854400Z",
     "start_time": "2024-11-22T20:15:01.716440700Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")"
   ],
   "id": "c08e3b8e59530cd8",
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'y_pred' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[50], line 3\u001B[0m\n\u001B[0;32m      1\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01msklearn\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mmetrics\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m mean_absolute_error, mean_squared_error\n\u001B[1;32m----> 3\u001B[0m mae \u001B[38;5;241m=\u001B[39m mean_absolute_error(y_test, \u001B[43my_pred\u001B[49m)\n\u001B[0;32m      4\u001B[0m mse \u001B[38;5;241m=\u001B[39m mean_squared_error(y_test, y_pred)\n\u001B[0;32m      5\u001B[0m rmse \u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39msqrt(mse)\n",
      "\u001B[1;31mNameError\u001B[0m: name 'y_pred' is not defined"
     ]
    }
   ],
   "execution_count": 50
  },
  {
   "cell_type": "markdown",
   "id": "791446455598b42a",
   "metadata": {},
   "source": [
    "#### Selecting fewer features\n",
    "We will also train the model with fewer features"
   ]
  },
  {
   "cell_type": "code",
   "id": "6cb381ceeee4f2a2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:15:02.479916600Z",
     "start_time": "2024-11-22T20:15:02.443553900Z"
    }
   },
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pickle\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the data: 80% training, 20% testing, use random splitting\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Fit the model on the training set\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Save the model to disk\n",
    "filename = '../models/regression_model_M2.sav'\n",
    "pickle.dump(model, open(filename, 'wb'))\n",
    "\n",
    "# Load the model from disk\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Evaluate the loaded model on the test set\n",
    "result = loaded_model.score(X_test, y_test)\n",
    "print(f\"R² Score of the Linear Regression model: {result:.4f}\")"
   ],
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/regression_model_M2.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[51], line 18\u001B[0m\n\u001B[0;32m     16\u001B[0m \u001B[38;5;66;03m# Save the model to disk\u001B[39;00m\n\u001B[0;32m     17\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/regression_model_M2.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 18\u001B[0m pickle\u001B[38;5;241m.\u001B[39mdump(model, \u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mwb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     20\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     21\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28mopen\u001B[39m(filename, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mrb\u001B[39m\u001B[38;5;124m'\u001B[39m))\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/regression_model_M2.sav'"
     ]
    }
   ],
   "execution_count": 51
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Visualizing the results"
   ],
   "id": "32798f4de37fe634"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:15:04.523370100Z",
     "start_time": "2024-11-22T20:15:04.496658500Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the data: 80% training, 20% testing, use random splitting\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/regression_model_M2.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "\n",
    "# Plot Actual vs. Predicted\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6)\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)  # Reference line\n",
    "plt.title(\"Actual vs Predicted Temperatures (Linear Regression Model)\")\n",
    "plt.xlabel(\"Actual Temperatures\")\n",
    "plt.ylabel(\"Predicted Temperatures\")\n",
    "plt.grid(True)\n",
    "save_fig(\"Actual_vs_Predicted_Linear_Regression_M2\")\n",
    "plt.show()"
   ],
   "id": "7e50d64251c28795",
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/regression_model_M2.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[52], line 13\u001B[0m\n\u001B[0;32m     11\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     12\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/regression_model_M2.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 13\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mrb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     15\u001B[0m \u001B[38;5;66;03m# Predict using the test set\u001B[39;00m\n\u001B[0;32m     16\u001B[0m y_pred \u001B[38;5;241m=\u001B[39m loaded_model\u001B[38;5;241m.\u001B[39mpredict(X_test)\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/regression_model_M2.sav'"
     ]
    }
   ],
   "execution_count": 52
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:15:04.866692900Z",
     "start_time": "2024-11-22T20:15:04.855966500Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")"
   ],
   "id": "f88695f59682a544",
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'y_pred' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[53], line 3\u001B[0m\n\u001B[0;32m      1\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01msklearn\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mmetrics\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m mean_absolute_error, mean_squared_error\n\u001B[1;32m----> 3\u001B[0m mae \u001B[38;5;241m=\u001B[39m mean_absolute_error(y_test, \u001B[43my_pred\u001B[49m)\n\u001B[0;32m      4\u001B[0m mse \u001B[38;5;241m=\u001B[39m mean_squared_error(y_test, y_pred)\n\u001B[0;32m      5\u001B[0m rmse \u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39msqrt(mse)\n",
      "\u001B[1;31mNameError\u001B[0m: name 'y_pred' is not defined"
     ]
    }
   ],
   "execution_count": 53
  },
  {
   "cell_type": "markdown",
   "id": "30467d2dab3df76e",
   "metadata": {},
   "source": [
    "## Building and Training a Random Forest Model\n",
    "\n",
    "After testing with a Linear Regression model, we will now explore a more advanced machine learning algorithm: **Random Forest**. This algorithm often performs better for complex, nonlinear datasets. The target variable is still `AverageTemperature`.\n",
    "\n",
    "### Why Random Forest?\n",
    "- **Handles Nonlinearity**: Random Forest can model nonlinear relationships that Linear Regression cannot capture effectively.\n",
    "- **Robust to Overfitting**: By averaging predictions across multiple decision trees, it reduces overfitting, especially when hyperparameters are tuned properly.\n",
    "- **Feature Importance**: Random Forest provides insights into which features are most influential in making predictions.\n",
    "- **Flexibility**: It works well with a mix of continuous and categorical data."
   ]
  },
  {
   "cell_type": "code",
   "id": "4652c1563c495505",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:15:25.135472700Z",
     "start_time": "2024-11-22T20:15:05.594873800Z"
    }
   },
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pickle\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude', 'Month']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the data: 80% training, 20% testing, use random splitting\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize the Random Forest model\n",
    "model = RandomForestRegressor(n_estimators=100, random_state=42)  # Default n_estimators is 100\n",
    "\n",
    "# Fit the model on the training set\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Save the model to disk\n",
    "filename = '../models/random_forest_model_M1.sav'\n",
    "pickle.dump(model, open(filename, 'wb'))\n",
    "\n",
    "# Load the model from disk\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Evaluate the loaded model on the test set\n",
    "result = loaded_model.score(X_test, y_test)  # R² score on the test set\n",
    "print(f\"R² Score of the Random Forest model: {result:.4f}\")"
   ],
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/random_forest_model_M1.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[54], line 20\u001B[0m\n\u001B[0;32m     18\u001B[0m \u001B[38;5;66;03m# Save the model to disk\u001B[39;00m\n\u001B[0;32m     19\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/random_forest_model_M1.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 20\u001B[0m pickle\u001B[38;5;241m.\u001B[39mdump(model, \u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mwb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     22\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     23\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28mopen\u001B[39m(filename, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mrb\u001B[39m\u001B[38;5;124m'\u001B[39m))\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/random_forest_model_M1.sav'"
     ]
    }
   ],
   "execution_count": 54
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Visualizing the results"
   ],
   "id": "748ebe20538e534e"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:15:37.188066300Z",
     "start_time": "2024-11-22T20:15:37.146508900Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define features and target\n",
    "features = ['Year', 'Latitude', 'Longitude', 'Month']\n",
    "X = df[features]  # Include all selected features\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the data: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/random_forest_model_M1.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "\n",
    "# Plot Actual vs. Predicted\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6, color='blue', label='Predictions')\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Ideal Fit')  # Reference line\n",
    "plt.title(\"Actual vs Predicted Temperatures (Random Forest Model)\")\n",
    "plt.xlabel(\"Actual Temperatures\")\n",
    "plt.ylabel(\"Predicted Temperatures\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "save_fig(\"Actual_vs_Predicted_Random_Forest_M1\")\n",
    "plt.show()"
   ],
   "id": "7aa48ac2c8d4ff1f",
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/random_forest_model_M1.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[55], line 13\u001B[0m\n\u001B[0;32m     11\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     12\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/random_forest_model_M1.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 13\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mrb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     15\u001B[0m \u001B[38;5;66;03m# Predict using the test set\u001B[39;00m\n\u001B[0;32m     16\u001B[0m y_pred \u001B[38;5;241m=\u001B[39m loaded_model\u001B[38;5;241m.\u001B[39mpredict(X_test)\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/random_forest_model_M1.sav'"
     ]
    }
   ],
   "execution_count": 55
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:15:40.627032100Z",
     "start_time": "2024-11-22T20:15:40.617503700Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")"
   ],
   "id": "95d4df13f9411f65",
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'y_pred' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[56], line 3\u001B[0m\n\u001B[0;32m      1\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01msklearn\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mmetrics\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m mean_absolute_error, mean_squared_error\n\u001B[1;32m----> 3\u001B[0m mae \u001B[38;5;241m=\u001B[39m mean_absolute_error(y_test, \u001B[43my_pred\u001B[49m)\n\u001B[0;32m      4\u001B[0m mse \u001B[38;5;241m=\u001B[39m mean_squared_error(y_test, y_pred)\n\u001B[0;32m      5\u001B[0m rmse \u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39msqrt(mse)\n",
      "\u001B[1;31mNameError\u001B[0m: name 'y_pred' is not defined"
     ]
    }
   ],
   "execution_count": 56
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Testing random forest with one hot encoded data"
   ],
   "id": "8bc9fd127c85d0a"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:16:22.969561Z",
     "start_time": "2024-11-22T20:15:48.923414700Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pickle\n",
    "\n",
    "# Dynamically select all one-hot encoded Country columns\n",
    "country_columns = [col for col in df.columns if col.startswith('Country_')]\n",
    "\n",
    "# Define features and target\n",
    "features = ['Year', 'Latitude', 'Longitude', 'Month'] + country_columns\n",
    "X = df[features]  # Include all selected features\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the data: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize the Random Forest model\n",
    "model = RandomForestRegressor(n_estimators=100, random_state=42)  # Default n_estimators is 100\n",
    "\n",
    "# Fit the model on the training set\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Save the model to disk\n",
    "filename = '../models/random_forest_model_M2.sav'\n",
    "pickle.dump(model, open(filename, 'wb'))\n",
    "\n",
    "# Load the model from disk\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Evaluate the loaded model on the test set\n",
    "result = loaded_model.score(X_test, y_test)  # R² score on the test set\n",
    "print(f\"R² Score of the Random Forest model: {result:.4f}\")"
   ],
   "id": "f58a715e9e35477e",
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/random_forest_model_M2.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[57], line 24\u001B[0m\n\u001B[0;32m     22\u001B[0m \u001B[38;5;66;03m# Save the model to disk\u001B[39;00m\n\u001B[0;32m     23\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/random_forest_model_M2.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 24\u001B[0m pickle\u001B[38;5;241m.\u001B[39mdump(model, \u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mwb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     26\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     27\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28mopen\u001B[39m(filename, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mrb\u001B[39m\u001B[38;5;124m'\u001B[39m))\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/random_forest_model_M2.sav'"
     ]
    }
   ],
   "execution_count": 57
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "The model does improve slightly by adding the AverageTemperatureUncertainty, but in a real scenario if we were trying to predict the weather we would not have this information in advance."
   ],
   "id": "a969eca7f14f4b0c"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:16:23.020444Z",
     "start_time": "2024-11-22T20:16:22.971563Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Get feature importance from the model\n",
    "scores = model.feature_importances_\n",
    "for name, importance in zip(features, scores):\n",
    "    print(f\"{name}: {importance:.4f}\")"
   ],
   "id": "be9260c463eaf351",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "The country features have little to no value in the model"
   ],
   "id": "990e40aad915427e"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Visualizing the results"
   ],
   "id": "2c984d18afe9a18b"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.971563Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Dynamically select all one-hot encoded Country columns\n",
    "country_columns = [col for col in df.columns if col.startswith('Country_')]\n",
    "\n",
    "# Define features and target\n",
    "features = ['Year', 'Latitude', 'Longitude', 'Month'] + country_columns\n",
    "X = df[features]  # Include all selected features\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the data: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/random_forest_model_M2.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "\n",
    "# Plot Actual vs. Predicted\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6, color='blue', label='Predictions')\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Ideal Fit')  # Reference line\n",
    "plt.title(\"Actual vs Predicted Temperatures (Random Forest Model)\")\n",
    "plt.xlabel(\"Actual Temperatures\")\n",
    "plt.ylabel(\"Predicted Temperatures\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "save_fig(\"Actual_vs_Predicted_Random_Forest_M2\")\n",
    "plt.show()"
   ],
   "id": "16d71f32a9631081",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.972563800Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")"
   ],
   "id": "5890f135c664d5f4",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## Building and Training a Support Vector Regression (SVR) Model\n",
    "\n",
    "After testing with simpler models like Linear Regression and Random Forest, we will now explore **Support Vector Regression (SVR)**, a robust and flexible algorithm capable of handling both linear and nonlinear relationships. The target variable is still `AverageTemperature`.\n",
    "\n",
    "### Why Support Vector Regression?\n",
    "- **Effective for Nonlinear Relationships**: SVR uses kernels (for example rbf, poly and linear) to map data into a higher-dimensional space, allowing it to capture complex patterns.\n",
    "- **Robust to Outliers**: By introducing a margin of tolerance (`epsilon`), SVR focuses on the most relevant data points (support vectors) and ignores small deviations.\n",
    "- **Generalization**: SVR aims to strike a balance between model complexity and prediction accuracy, reducing the risk of overfitting.\n",
    "\n",
    "### Key Considerations\n",
    "- **Feature Scaling**: SVR is sensitive to feature magnitudes, so scaling features (here with `StandardScaler`) is essential for optimal performance.\n",
    "- **Training Time**: SVR can be computationally expensive for large datasets due to its quadratic or cubic time complexity, especially with nonlinear kernels.\n",
    "- **Feature Selection**: Different features sets were tested for each model."
   ],
   "id": "4e8206ca0620ef85"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "#### Testing rbf kernel"
   ],
   "id": "d25b567a1a46219f"
  },
  {
   "cell_type": "code",
   "id": "f6fe942e1b47b458",
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.973564900Z"
    }
   },
   "source": [
    "from sklearn.svm import SVR\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude', 'Month']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Create a pipeline to scale data\n",
    "model = make_pipeline(StandardScaler(), SVR(kernel='rbf', C=1.0, epsilon=0.1, degree=3))\n",
    "\n",
    "# Fit the model\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Save the model to disk\n",
    "filename = '../models/SVR_model_M1.sav'\n",
    "pickle.dump(model, open(filename, 'wb'))\n",
    "\n",
    "# Load the model from disk\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Evaluate on the test set\n",
    "result = loaded_model.score(X_test, y_test)\n",
    "print(f\"R² Score of the SVR model: {result:.4f}\")"
   ],
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Visualizing the results"
   ],
   "id": "9e769208c3cbad29"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.973564900Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude', 'Month']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/SVR_model_M1.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "\n",
    "# Plot Actual vs Predicted\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6, color='blue', label='Predictions')\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Ideal Fit')  # Reference line\n",
    "plt.title(\"Actual vs Predicted Temperatures (SVR Model - rbf)\")\n",
    "plt.xlabel(\"Actual Temperatures\")\n",
    "plt.ylabel(\"Predicted Temperatures\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "save_fig(\"Actual_vs_Predicted_SVR_M1\")\n",
    "plt.show()"
   ],
   "id": "4484e2fbf1f6ddff",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.974700100Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")"
   ],
   "id": "2d65a5a423e247dc",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "#### Testing poly kernel"
   ],
   "id": "af7d7e7a9cada0ef"
  },
  {
   "cell_type": "code",
   "id": "9f2f2d147a5b630d",
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.975700400Z"
    }
   },
   "source": [
    "from sklearn.svm import SVR\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude', 'Month']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Create a pipeline to scale data\n",
    "model = make_pipeline(StandardScaler(), SVR(kernel='poly', C=1.0, epsilon=0.1, degree=3))\n",
    "\n",
    "# Fit the model\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Save the model to disk\n",
    "filename = '../models/SVR_model_M2.sav'\n",
    "pickle.dump(model, open(filename, 'wb'))\n",
    "\n",
    "# Load the model from disk\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Evaluate on the test set\n",
    "result = loaded_model.score(X_test, y_test)\n",
    "print(f\"R² Score of the SVR model: {result:.4f}\")"
   ],
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Visualizing the results"
   ],
   "id": "ef0606676c257a11"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.976701800Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude', 'Month']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/SVR_model_M2.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "\n",
    "# Plot Actual vs Predicted\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6, color='blue', label='Predictions')\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Ideal Fit')  # Reference line\n",
    "plt.title(\"Actual vs Predicted Temperatures (SVR Model - poly)\")\n",
    "plt.xlabel(\"Actual Temperatures\")\n",
    "plt.ylabel(\"Predicted Temperatures\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "save_fig(\"Actual_vs_Predicted_SVR_M2\")\n",
    "plt.show()"
   ],
   "id": "d4ac5664f28cfae0",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.977702800Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")"
   ],
   "id": "ccaecc1a404e8a69",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "#### Testing linear kernel"
   ],
   "id": "3a4b4fea0c00d140"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.978703200Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.svm import SVR\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude', 'Month']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Create a pipeline to scale data\n",
    "model = make_pipeline(StandardScaler(), SVR(kernel='linear', C=1.0, epsilon=0.1, degree=3))\n",
    "\n",
    "# Fit the model\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Save the model to disk\n",
    "filename = '../models/SVR_model_M3.sav'\n",
    "pickle.dump(model, open(filename, 'wb'))\n",
    "\n",
    "# Load the model from disk\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Evaluate on the test set\n",
    "result = loaded_model.score(X_test, y_test)\n",
    "print(f\"R² Score of the SVR (linear kernel) model: {result:.4f}\")"
   ],
   "id": "3b5166f97341635c",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Visualizing the results"
   ],
   "id": "6cdd5dfe074ce530"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.979704Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude', 'Month']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/SVR_model_M3.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "\n",
    "# Plot Actual vs Predicted\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6, color='blue', label='Predictions')\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Ideal Fit')  # Reference line\n",
    "plt.title(\"Actual vs Predicted Temperatures (SVR Model - linear)\")\n",
    "plt.xlabel(\"Actual Temperatures\")\n",
    "plt.ylabel(\"Predicted Temperatures\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "save_fig(\"Actual_vs_Predicted_SVR_M3\")\n",
    "plt.show()"
   ],
   "id": "c2dba222a1b61547",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {
    "ExecuteTime": {
     "start_time": "2024-11-22T20:16:22.979704Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")"
   ],
   "id": "8b3dd2bfc6b73238",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "#### Testing LinearSVR"
   ],
   "id": "80e523e9d345c32c"
  },
  {
   "cell_type": "code",
   "id": "58f9843081fb47c8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:29:27.024075200Z",
     "start_time": "2024-11-22T20:29:26.891200Z"
    }
   },
   "source": [
    "from sklearn.svm import LinearSVR\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import make_pipeline\n",
    "import pickle\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude', 'Month']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Create a pipeline to scale data (LinearSVR is sensitive to feature scales)\n",
    "model = make_pipeline(StandardScaler(), LinearSVR(C=1.0, epsilon=0.5, dual=True, max_iter=10000, random_state=42))\n",
    "\n",
    "# Fit the model\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Save the model to disk\n",
    "filename = '../models/SVR_model_M3.sav'\n",
    "pickle.dump(model, open(filename, 'wb'))\n",
    "\n",
    "# Load the model from disk\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Evaluate the loaded model on the test set\n",
    "result = loaded_model.score(X_test, y_test)  # R² score for regression tasks\n",
    "print(f\"R² Score of the LinearSVR model: {result:.4f}\")"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R² Score of the LinearSVR model: 0.0835\n"
     ]
    }
   ],
   "execution_count": 67
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Visualizing the results"
   ],
   "id": "b37d33d7796ffdc9"
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude', 'Month']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/LinearSVR_model_M1.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "\n",
    "# Plot Actual vs Predicted\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6, color='blue', label='Predictions')\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Ideal Fit')  # Reference line\n",
    "plt.title(\"Actual vs Predicted Temperatures (LinearSVR Model)\")\n",
    "plt.xlabel(\"Actual Temperatures\")\n",
    "plt.ylabel(\"Predicted Temperatures\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "save_fig(\"Actual_vs_Predicted_LinearSVR_M1\")\n",
    "plt.show()"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "6f1d937a89c3dd3d"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:29:41.598391700Z",
     "start_time": "2024-11-22T20:29:41.551404Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")"
   ],
   "id": "7953eea92da18841",
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'y_pred' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[69], line 3\u001B[0m\n\u001B[0;32m      1\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01msklearn\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mmetrics\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m mean_absolute_error, mean_squared_error\n\u001B[1;32m----> 3\u001B[0m mae \u001B[38;5;241m=\u001B[39m mean_absolute_error(y_test, \u001B[43my_pred\u001B[49m)\n\u001B[0;32m      4\u001B[0m mse \u001B[38;5;241m=\u001B[39m mean_squared_error(y_test, y_pred)\n\u001B[0;32m      5\u001B[0m rmse \u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39msqrt(mse)\n",
      "\u001B[1;31mNameError\u001B[0m: name 'y_pred' is not defined"
     ]
    }
   ],
   "execution_count": 69
  },
  {
   "cell_type": "markdown",
   "id": "cbd2f09d",
   "metadata": {},
   "source": [
    "## Building and Training a K-Nearest Neighbors (KNN) Model\n",
    "\n",
    "### Why KNN?\n",
    "- **Non-parametric and Flexible**: KNN makes no explicit assumption about the underlying data distribution, making it well-suited for capturing patterns in diverse datasets.\n",
    "- **Simple to Understand and Implement**: KNN is straightforward—it relies on measuring the distance between data points and uses the average of the `k` nearest neighbors to predict the target variable.\n",
    "- **Adaptability to Data Complexity**: By tuning the number of neighbors (`k`), KNN can balance between underfitting (low `k`) and overfitting (high `k`) for better generalization.\n",
    "- **Effective for Local Patterns**: KNN excels at identifying local trends in the data, making it particularly useful for problems where relationships vary across regions of the input space.\n",
    "\n",
    "### Key Considerations\n",
    "- **Computational Efficiency**: KNN can be computationally expensive for large datasets as it needs to compute distances to all points in the training set during predictions.\n"
   ]
  },
  {
   "cell_type": "code",
   "id": "3e946bae",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:29:42.272668300Z",
     "start_time": "2024-11-22T20:29:42.002893800Z"
    }
   },
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pickle\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Month', 'Latitude', 'Longitude']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "scikitlearn_knn = KNeighborsRegressor(n_neighbors=5)\n",
    "scikitlearn_knn.fit(X_train, y_train)\n",
    "y_pred = scikitlearn_knn.predict(X_test)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "print(\"knn mean squared error: \", mse)\n",
    "\n",
    "# Save the model to disk\n",
    "filename = '../models/KNN_model_M1.sav'\n",
    "pickle.dump(scikitlearn_knn, open(filename, 'wb'))\n",
    "\n",
    "# Load the model from disk\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Evaluate on the test set\n",
    "result = loaded_model.score(X_test, y_test)\n",
    "print(f\"R² Score of the KNN model: {result:.4f}\")"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "knn mean squared error:  2.7279378897379107\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/KNN_model_M1.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[70], line 21\u001B[0m\n\u001B[0;32m     19\u001B[0m \u001B[38;5;66;03m# Save the model to disk\u001B[39;00m\n\u001B[0;32m     20\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/KNN_model_M1.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 21\u001B[0m pickle\u001B[38;5;241m.\u001B[39mdump(scikitlearn_knn, \u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mwb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     23\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     24\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28mopen\u001B[39m(filename, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mrb\u001B[39m\u001B[38;5;124m'\u001B[39m))\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/KNN_model_M1.sav'"
     ]
    }
   ],
   "execution_count": 70
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Visualizing the results"
   ],
   "id": "b4b2f9bfc22c0649"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:29:42.467762800Z",
     "start_time": "2024-11-22T20:29:42.436168Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Month', 'Latitude', 'Longitude']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/KNN_model_M1.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "\n",
    "# Plot Actual vs Predicted\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6, color='blue', label='Predictions')\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Ideal Fit')  # Reference line\n",
    "plt.title(\"Actual vs Predicted Temperatures (KNN Model)\")\n",
    "plt.xlabel(\"Actual Temperatures\")\n",
    "plt.ylabel(\"Predicted Temperatures\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "save_fig(\"Actual_vs_Predicted_KNN_M1\")\n",
    "plt.show()"
   ],
   "id": "8a25723576a0e4c9",
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/KNN_model_M1.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[71], line 12\u001B[0m\n\u001B[0;32m     10\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     11\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/KNN_model_M1.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 12\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mrb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     14\u001B[0m \u001B[38;5;66;03m# Predict using the test set\u001B[39;00m\n\u001B[0;32m     15\u001B[0m y_pred \u001B[38;5;241m=\u001B[39m loaded_model\u001B[38;5;241m.\u001B[39mpredict(X_test)\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/KNN_model_M1.sav'"
     ]
    }
   ],
   "execution_count": 71
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:29:42.638013600Z",
     "start_time": "2024-11-22T20:29:42.623557700Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")"
   ],
   "id": "e7fa6d0e3416eb4e",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 1.1469\n",
      "Mean Squared Error (MSE): 2.7279\n",
      "Root Mean Squared Error (RMSE): 1.6516\n"
     ]
    }
   ],
   "execution_count": 72
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "#### Testing with fewer features"
   ],
   "id": "1c81a107b1e3da5d"
  },
  {
   "cell_type": "code",
   "id": "69214128",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:29:44.190595400Z",
     "start_time": "2024-11-22T20:29:43.985927700Z"
    }
   },
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pickle\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "scikitlearn_knn = KNeighborsRegressor(n_neighbors=5)\n",
    "scikitlearn_knn.fit(X_train, y_train)\n",
    "y_pred = scikitlearn_knn.predict(X_test)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "print(\"knn mean squared error: \", mse)\n",
    "\n",
    "# Save the model to disk\n",
    "filename = '../models/KNN_model_M2.sav'\n",
    "pickle.dump(scikitlearn_knn, open(filename, 'wb'))\n",
    "\n",
    "# Load the model from disk\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Evaluate on the test set\n",
    "result = loaded_model.score(X_test, y_test)\n",
    "print(f\"R² Score of the KNN model: {result:.4f}\")"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "knn mean squared error:  52.975136962632\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/KNN_model_M2.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[73], line 21\u001B[0m\n\u001B[0;32m     19\u001B[0m \u001B[38;5;66;03m# Save the model to disk\u001B[39;00m\n\u001B[0;32m     20\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/KNN_model_M2.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 21\u001B[0m pickle\u001B[38;5;241m.\u001B[39mdump(scikitlearn_knn, \u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mwb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     23\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     24\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28mopen\u001B[39m(filename, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mrb\u001B[39m\u001B[38;5;124m'\u001B[39m))\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/KNN_model_M2.sav'"
     ]
    }
   ],
   "execution_count": 73
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Visualizing the results"
   ],
   "id": "ec7c4bb5f94e19d6"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:29:45.742789900Z",
     "start_time": "2024-11-22T20:29:45.713284100Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define features and target\n",
    "X = df[['Year', 'Latitude', 'Longitude']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/KNN_model_M2.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "\n",
    "# Plot Actual vs Predicted\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6, color='blue', label='Predictions')\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Ideal Fit')  # Reference line\n",
    "plt.title(\"Actual vs Predicted Temperatures (KNN Model)\")\n",
    "plt.xlabel(\"Actual Temperatures\")\n",
    "plt.ylabel(\"Predicted Temperatures\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "save_fig(\"Actual_vs_Predicted_KNN_M2\")\n",
    "plt.show()"
   ],
   "id": "1fe1982021b0e4e8",
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/KNN_model_M2.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[74], line 12\u001B[0m\n\u001B[0;32m     10\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m     11\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/KNN_model_M2.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 12\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mrb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     14\u001B[0m \u001B[38;5;66;03m# Predict using the test set\u001B[39;00m\n\u001B[0;32m     15\u001B[0m y_pred \u001B[38;5;241m=\u001B[39m loaded_model\u001B[38;5;241m.\u001B[39mpredict(X_test)\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/KNN_model_M2.sav'"
     ]
    }
   ],
   "execution_count": 74
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-22T20:29:46.005818300Z",
     "start_time": "2024-11-22T20:29:45.996501500Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")"
   ],
   "id": "1fcae670e15cfecd",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 5.2251\n",
      "Mean Squared Error (MSE): 52.9751\n",
      "Root Mean Squared Error (RMSE): 7.2784\n"
     ]
    }
   ],
   "execution_count": 75
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '../models/KNN_model_M2.sav'",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[79], line 10\u001B[0m\n\u001B[0;32m      8\u001B[0m \u001B[38;5;66;03m# Load the model from disk\u001B[39;00m\n\u001B[0;32m      9\u001B[0m filename \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m../models/KNN_model_M2.sav\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m---> 10\u001B[0m loaded_model \u001B[38;5;241m=\u001B[39m pickle\u001B[38;5;241m.\u001B[39mload(\u001B[38;5;28;43mopen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mfilename\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mrb\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m)\n\u001B[0;32m     12\u001B[0m \u001B[38;5;66;03m# Predict using the test set\u001B[39;00m\n\u001B[0;32m     13\u001B[0m y_pred \u001B[38;5;241m=\u001B[39m loaded_model\u001B[38;5;241m.\u001B[39mpredict(X_test)\n",
      "File \u001B[1;32m~\\PycharmProjects\\pythonProject1\\.venv\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:324\u001B[0m, in \u001B[0;36m_modified_open\u001B[1;34m(file, *args, **kwargs)\u001B[0m\n\u001B[0;32m    317\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m file \u001B[38;5;129;01min\u001B[39;00m {\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m1\u001B[39m, \u001B[38;5;241m2\u001B[39m}:\n\u001B[0;32m    318\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[0;32m    319\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIPython won\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mt let you open fd=\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfile\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m by default \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    320\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    321\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124myou can use builtins\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m open.\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m    322\u001B[0m     )\n\u001B[1;32m--> 324\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mio_open\u001B[49m\u001B[43m(\u001B[49m\u001B[43mfile\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "\u001B[1;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '../models/KNN_model_M2.sav'"
     ]
    }
   ],
   "source": [
    "# Plotting a basic histogram\n",
    "X = df[['Year', 'Latitude', 'Longitude']]\n",
    "y = df['AverageTemperature']  # Target variable\n",
    "\n",
    "# Split the dataset: 80% training, 20% testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Load the model from disk\n",
    "filename = '../models/KNN_model_M2.sav'\n",
    "loaded_model = pickle.load(open(filename, 'rb'))\n",
    "\n",
    "# Predict using the test set\n",
    "y_pred = loaded_model.predict(X_test)\n",
    "plt.hist(y_pred, bins=25, color='skyblue', edgecolor='black')\n",
    " \n",
    "# Adding labels and title\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('predicted Temperature')\n",
    "plt.title('pred temp')\n",
    " \n",
    "# Display the plot\n",
    "plt.show()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-11-22T20:33:25.996770500Z",
     "start_time": "2024-11-22T20:33:25.922942Z"
    }
   },
   "id": "7efec38c93d7004",
   "execution_count": 79
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false
   },
   "id": "447603b0ce4397b0"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
